#
#  History see CHANGES.pwlconfig
#
[ -z "$BASH" ] && { echo "`basename $0` requires bash" 1>&2; exit 1; }
#
MOVE_TO_COL="echo -en \t\t"
WHOAMI=whoami
#
# include from "scripts directory or "Embedded_Build directory
#
PROGRAM_NAME=`basename $0`
#
# make sure we're executed from Embedded_Build
#
basedir=`basename $PWD`
#
if [ "$basedir" = "Embedded_Build" ] ; then
   baseprj="."
   basedir="./scripts"
else
    echo "+-----+-----+-----+-----+-----+-----+-----+-----+" >&2
    echo " The pwlconfig scripts must be executed from the " >&2
    echo " Embedded_Build directory....                    " >&2
    echo "+-----+-----+-----+-----+-----+-----+-----+-----+" >&2
    # end this right now!
    exit 1 
fi
#
# Version is set in CHANGES.pwlconfig
#
. $basedir/CHANGES.pwlconfig
#
PWL_REL_VER=$PWL_VER      # for backward compatability
#
#echo functions base: $basedir projects at: $baseprj
#
# utility programs, and directories may vary with distro or preference
#
export DIALOG="$baseprj/bin/lxdialog"
#PLILO="$baseprj/bin/lilo"
PLILO="lilo"
if [ -z "$RPM" ] ; then
   RPM=${PWD}/bin/rpm   # make sure we use v3.0.3 for now
fi
#
DEV_MGR="$basedir/mkBootDevice"
PWL_BACKUP="$basedir/pwl_backup"
PWL_CONFIG="$baseprj/pwlconfig"
PWL_CUSTOM="$basedir/pwl_custom"
PRJ_DEFAULTS="$basedir/pwl_defaults"
PWL_FUNCTIONS="$basedir/pwl_functions"
PWL_LISTER="$basedir/pwl_lister"
PWL_PROJECTS="$basedir/pwl_projects"
PWL_PKGCONF="$basedir/pwl_pkgconf"
PWL_PKGMGR="$basedir/pwl_pkgmgr"
PWL_UPDATE="$basedir/pwl_update"
PWL_CLEAN="$basedir/pwl_clean"
PWL_TARGET="$basedir/pwl_target"
PWL_TARGETF="$basedir/pwl_target_functions"
PWL_TARGETL="$basedir/pwl_target_load"
PWL_ENVSEL="$basedir/pwl_envsel"
PWL_CREATE="$basedir/pwl_create"
RM="rm -f"
TAR=tar
#
# PWL - Directories (based from installed directory)
#
export BKS_DIR="$baseprj/backups"     # projects backups
export EXA_DIR="$baseprj/examples"    # example projects
export BIN_DIR="$baseprj/bin"         # binaries needed by pwlconfig
export MNT_DIR="$baseprj/mnt"         # device mount location
export PKG_DIR="$baseprj/packages"    # contains tar packages
export PRJ_DIR="$baseprj/projects"    # contains project configurations
export SCR_DIR="$baseprj/scripts"     # pwlconfig scripts
export SRC_DIR="$baseprj/src"         # rpm build tree
export TMP_DIR="$baseprj/tmp"         # temporary files
export RPW_DIR="$baseprj/rpm"         # rpm extract work directory
#
#  project specific directories
#
export CUSTOM_DIR="custom"
export PRJ_MNT="mnt"
#
# PWL System Files used in all projects
#
HELP_FILE=$basedir/README.pwlconfig
PRJ_LAST=$PRJ_DIR/.last.project
CUSTOM_LST=custom.list
CUSTOM_SRC=custom.src
DEFAULT_CFG=project.defaults
CFG_Default=project.conf
PKG_INDEX=.index.list
#
# verify utility programs exists
#
   if [ ! -f "$DIALOG" ]; then
      echo Utility program \"lxdialog\" not found
      echo '( From (RH) /usr/src/linux type make Menuconfig'
      echo '   then cp /usr/src/linux/scripts/lxdialog/lxdialog to ./bin)'
      exit 1
   fi
   if [ ! -f "$DEV_MGR" ]; then
      echo Shell script $DEV_MGR not found
      exit 1
   fi
   if [ ! -f "$PWL_CUSTOM" ] ; then
      echo Shell script $PWL_CUSTOM not found
      exit 1
   fi
   if [ ! -f "$PRJ_DEFAULTS" ] ; then
      echo Shell script $PRJ_DEFAULTS not found
   fi
   if [ ! -f "$HELP_FILE" ] ; then
      echo Help file $HELP_FILE not found
   fi

#=============================================================================
#
#  Utility functions
#      set_geometry
#      get_string
#      debug_monitor
#      debug_trace
#
# set_geometry - copied almost entirely from Menuconfig
#
set_geometry ()
{
	# Some distributions export these with incorrect values
	# which can really screw up some ncurses programs.
	LINES=  COLUMNS=
	ROWS=${1:-24}  COLS=${2:-80}

	# Just in case the nasty rlogin bug returns.
	#
	[ $ROWS = 0 ] && ROWS=24
	[ $COLS = 0 ] && COLS=80

	if [ $ROWS -lt 19 -o $COLS -lt 80 ]
	then
		echo -e "\n\007Your display is too small to run pwlconfig!"
		echo "It must be at least 19 lines by 80 columns."
		exit 0
	fi
	export ROWS=$((ROWS-4))
	export COLS=$((COLS-5))
}


#
# get_string( title, instructions,  *resultString,  [default_or_prefix] )
#           - Create a dialog for entering a string
#           - if a default is supplied, it is shown in the input field
#           - returns 0 if Ok was pressed (string may be zero length)
#           - returns 1 if Help was pressed
#           - returns 255 if cancel or ESC was selected
function get_string ()
{
   answer=""
   #
   # Display prompt
   #
   if [ "$usrMode" = "C" ] ; then
      # write prompt to screen
      echo $1
      echo ""
      echo "$2  $4"    # don't put on same line since we can't edit in-line
      read answer
      if [ -z "$answer" ] ; then
         answer=$4     # accept default
      fi
      retVal="0"
   #
   else
      # show default if provided
      if [ -z "$4" ] ; then
        defStr=""
      else
        defStr=$4
      fi
      #
      # show dialog
      #
      $DIALOG --title "$1" \
              --backtitle "$backtitle" \
              --inputbox "$2" \
              10 75 "$defStr" 2>.result
      #
      # interpret results
      #
      retVal=$?
      if [ "$retVal" = "1" ] ; then   #help requested
         show_help
         return 1
      fi
      if [ "$retVal" = "0" ] ; then
         answer="`cat .result`"
      fi
      if [ ! -s .result ] ; then  # empty results
         return 1
      fi
   fi
   # return result
   eval $3=\"$answer\"
   return $retVal   # help, esc or cancel entered
}

#
# debug_monitor - allows debugging by typing commands and executing
#                anywhere within your program.
#                Just hit enter (blank line) to continue with program
#
function debug_monitor
{
   echo ""
   echo -n "mon\> "
   read x
   while [ ! -z "$x" ] ; do
      eval $x
      echo ""
      echo -n "mon\> "
      read x
   done
}

#
# debug_trace ( function_to_trace )- trace a shell script function call
#       NOTE: does not step around loops or multi-line if statements
#
#       Each line of the function is displayed, user can ENTER:
#         y  - execute this line (same as pressing ENTER)
#         n  - skip this line
#         m  - execute this line and start the debug monitor
#         c  - continue executing to the end of the function
#         x  - exit this function and enter the debug monitor
#
function debug_trace
{
   # read the function and strip out the brackets
   #
   sed -n /"^function $1"/,/'^}'/p $PROGRAM_NAME | sed /^{/d | sed /^}/d > .dtrace
   shift     # adjust parameters to match parameters for function call
   #
   #  show user what function is being traced (and don't execute 'function')
   #
   echo `head -1 .dtrace`
   tail +2 .dtrace | cat > .dtrace
   #
   # now display the function, line by line, and handle user input
   #
   while [ -s .dtrace ] ; do
      # extract the next line and remove it from the trace file
      lineIn="`head -1 .dtrace`"
      tail +2 .dtrace | cat > .dtrace
      #
      # allow user to execute non-blank lines
      #
      if [ ! -z "$lineIn" ] ; then
         echo -n "trace: $lineIn  ([y],n,c,m,x)?"
         read x
         if [ "$x" = "x" ] ; then     # quit
            break
         elif [ "$x" = "m" ] ; then   # execute this one and enter debugger
            eval $lineIn
            debug_monitor
         elif [ "$x" = "y" ] ; then   # execute this one
            eval $lineIn
         elif [ "$x" = ""  ] ; then   # execute this one
            eval $lineIn
         elif [ "$x" = "c" ] ; then   # continue executing to end of function
            eval $lineIn                     # execute this line
            cat .dtrace                      # show the rest
            . ./.dtrace                      # and execute 'em
            break                            # then quit
         fi
         # otherwise, skip this line and go to next line
      fi
   done
   $RM .dtrace
   echo trace done
   debug_monitor
}

#
# debug _mode(new mode) - enable or disable debugging output features
#
function debug_mode()
{
   debugMode="$1"
   #
   # enable/disable debuging macros
   #
   if [ $debugMode = "0" ] ; then
      decho=":"
      dwait=
      dmon=
      dtrace=
      RM="rm -f"
   else
      decho=echo
      dwait='read x'
      dmon='debug_monitor'
      dtrace=debug_trace
      RM=":"                # don't delete temporary files when debugging
   fi
}
####################################################################
#
#  List handlers (using lxdialog)
#
####################################################################
#
# show_list ( title, list.file, prompt )
#
function show_list()
{
   $decho "start show_list: $*"
   if [ -z "$ListDefault" ] ; then
      ListDefault="Add"   # todo: should be head item in list.file
   fi
   local listTitle="$1"
   local listFile="$2"
   local cmdPrompt="$3"
   #
   if [ "$cmdPrompt" = "" ] ; then
      cmdPrompt="internal error: show_list called from $0"
   fi
   #$decho -e "show list for: $listTitle \n  from: $listFile\n prompt: $cmdPrompt"
   #
   echo -n $DIALOG --title     \""${listTitle}"\"     \
                   --backtitle \"${backtitle}\"       \
                   --menu      \""${cmdPrompt}"\"     \
              $ROWS $COLS $((ROWS-8))                 \
              "'$ListDefault'" > .dialog

   cat $listFile >> .dialog

   . ./.dialog
}

#
# show_results ( file, title )  - display results file
#
function show_results ()
{
   if [ -f "$1" ] && [ "$usrMode" = "I" ] ; then
      cp $1 .show_result
      if [ -z "$2" ] ; then
         resTitle="Results"
      else
         shift
         resTitle="$*"
      fi
      #
      # -- lxdialog / text box has a few bugs
      #    ...if you page down in a 2+ page file, the
      #    dialog is not properly cleared..use arrow keys to view
      #    to the end of the file.
      #    ...if you don't have the file in the calling directory, the
      #    terminal never clears properly
      #
      $DIALOG --title "$resTitle"        \
              --backtitle "$backtitle"  \
              --textbox .show_result $ROWS $COLS
      $RM  .show_result
   fi
}

#
# show_message ( title, message [,height] ) - display a short message
#
function show_message ()
{
   if [ ! "$usrMode" = "I" ] ; then
      echo ""
      echo $1
      echo $2
      return
   fi
   height=7
   if [ ! -z "$3" ] && [ $3 -lt "$ROWS" ] && [ $3 -gt 7 ] ; then
            height="$3"
   fi
   #
   echo "$2" > .result
   $DIALOG --backtitle "$backtitle" --title "$1"\
           --msgbox "$2" $height $((COLS-20))

   # --msgbox is undocumented feature of lxdialog (see the source vs help)
   # but wraps text lines nicely
}


#
# show_files ( title,  pack.lst ) - show checklist of files within a package
#
function show_files()
{
   $decho "show_files: $*"
    ListDefault="$filesDefault"
    #
    show_list "${1}" $2 \
"Select files to include                           Project: $CFG_BASE" 
}

#
# Displays a dialog of a list of files
#
function show_FileSelect()
{
   if [ -z "$fileSelectDefault" ] ; then
      fileSelectDefault="\."
   fi
   echo -n $loc/$DIALOG --title \'$1\' \
                   --backtitle \"$backtitle\"       \
                   --menu                           \
"'Select a file or traverse a directory         Project: $CFG_BASE'" \
              $ROWS $COLS $((ROWS-8)) \
              "'$fileSelectDefault'" > $loc/.dialog

   cat $2 >> $loc/.dialog
   . $loc/.dialog
}

#
# FileSelect( srcPath, *resultFilename, [ ext [ Dir-Only ] ] )
#  dialog box to display a file tree and allow it to be traversed. 
#  returns a file that is selected or a directory as selected
#
function FileSelect( )
{
   $decho "start fileselect $*"
   #
   local srcpath=$1
   local ext=$3
   local dirOnly=$4
   local userFile=""
   local loc=""
   #
   # build list of files and display (use -p to indicate type of file)
   #
   loc=$PWD
   if [ ! -d $srcpath ] ; then
      srcpath=".."
   fi
   cd $srcpath
   srcpath=$PWD
   cd $loc
   userFile=$srcpath    # default is directory path 
   #
   fileselectDone=0
   #
   while [ "$fileselectDone" = "0" ]; do
      #
      # build list of files
      #
      cd $srcpath

      echo "../" > $loc/.fileselect.lst  # make default for empty directories
      #
      # always list all directories (add "/" suffix to indicate directory)
      #
      find -maxdepth 1 -type d | sort | gawk '{printf("%s/\n", $1 )}' >> $loc/.fileselect.lst 
      #
      # list type of files given or all files 
      #
      if [ ! -z "$ext" ] ; then
         find -maxdepth 1 -name "$ext" | sort >> $loc/.fileselect.lst
      else
         find -maxdepth 1 -type f | sort >> $loc/.fileselect.lst 
      fi
      cd $loc
      #
      # clean up the files listed - remove leading ./ and blank lines
      #   format output for lxdialog
      #
      sed 's/^.\///g' $loc/.fileselect.lst | sed '/^$/d' | gawk '{ \
                 printf(" '\''%s'\'' '\''%s'\''", $1, $1 ) \
            }' > $loc/.tmp.lst

      show_FileSelect "$srcpath" .tmp.lst 2> .result

      retVal=$?
      read selection < .result

      case "$retVal" in
         1|255)                      # exit
           fileselectDone=1
           if [ "$dirOnly" = "" ] ; then  # if not requesting directories, 
              userFile=""               #  then exit with blank filename
           fi
           ;;
         0|3|4|5|6)                  # file or directory selected
           if [ -f $srcpath/$selection ] ; then
               $decho "found file $selection"
              userFile="$srcpath/$selection"
              fileselectDone=1

           elif [ -d $srcpath/$selection ] ; then        # recurse into directory
              $decho "traverse into directory $srcpath / $selection" 
              cd $srcpath/$selection   # rebuild path for ".." selections
              srcpath=$PWD
              cd $loc
              userFile=$srcpath

           else
              $decho "not found $srcpath  / $selection"
              xx=1
           fi
         ;;
      esac
   done
   # file selected, return the filename
   #
   $decho "file selected: $userFile"
   eval $2=\"$userFile\"
   #
   cd $loc
   $RM -rf .fileselect.lst
   #
   return 0     
}

#
# show_help( context help file, menu_help file, ...,  file help delimiter)
#     - shows individual help screens, menu help description or defaults
#       to display the predefined HELP_FILE file.
#       Help files are delimited by "filename"...END, which must start
#       on the first column of the file.
#
function show_help ()
{
   $decho "start show_help $*"
   rm -f .result
   #
   # check for special file (xxx.README) help description
   #
   argc=$#
   let "argc = argc - 1"
   echo -n "" > .result
   while [ $argc -gt 0  ]; do
      if [ -f "$1" ] ; then
         #
         # scan file for help messages
         #
         helpFn=$1
         helpTitle=`basename $1`
         sed -n /$helpTitle/,/^END/p $helpFn | grep -v "^$helpTitle" | grep -v "^END" > .result
         #
      fi
      shift
      let "argc = argc - 1"
      #
      # may be a valid file name with no valid help
      #
      if [ -s .result ] ; then
         break                 # found it, help is on the way

      fi
   done
   #
   # if thats no help, check for menu description from HELP_FILE
   #
   if [ ! -s .result ] ; then
      #
      #  all parameters scanned, last one is string to search for from
      #  global help file
      #
      if [ "$1" != "" ] && [ -f $HELP_FILE ] ; then
         helpFn=$HELP_FILE
         helpTitle="$1"
         sed -n /$1/,/^END/p $helpFn | grep -v "^$1" | grep -v "^END" > .result
      fi
   fi
   #
   # if still no help, show the overview or display error message
   #
   if [ ! -s .result ] ; then
      if [ -f $HELP_FILE ] ; then
         helpFn=$HELP_FILE
         helpTitle="pwlconfig"
         cp $helpFn .result
      else                               # now we are helpless
         helpTitle="Pwlconfig Help file not found !"
         echo "No help available. Could not find $HELP_FILE" > .result
      fi
   fi
   #
   # now show help
   #
   show_results .result "Help for: $helpTitle"
   #
   $decho "end show_help"
}


#
# show_confirm ( title, message [,height] ) - display a short message
#                                      with yes/no response buttons
#
#    returns 0 = 'Y'  1 for 'N' or 255 for 'Esc'
#
function show_confirm ()
{
   if [ ! "$usrMode" = "I" ] ; then
      return 0                     # default to Yes
   fi
   height=7
   if [ ! -z "$3" ] && [ $3 -lt "$ROWS" ] && [ $3 -gt 7 ] ; then
            height="$3"
   fi
   #
   $DIALOG --backtitle "$backtitle" --title "$1"\
           --yesno "$2" $height  $((COLS-20))
}


#
#  build_changed_list( changedFiles, selectedFiles, dialogLst, [addPrompt])
#     builds a dialog of files listed in changedFiles. If the file is
#     also found in the selectedFiles list, then it is enabled.
#     The results of this are stored in the named dialogLst file.
#
function build_changed_list()
{
   $decho "start build_changed_list"
   #
   local changedList=$1
   local selectedList=$2
   local dialogLst=$3
   if [ "$4" = "" ] ; then
      addPrompt="Add Selected Files to $CFG_BASE Configuration"
   else
      addPrompt="$4"
   fi
   #
   #  Include options to add or remove all files from this package
   #
   echo -n > $dialogLst
   echo -n " 'Add'      '${addPrompt}' "         >> $dialogLst
   echo -n " 'Skip'     '----' "                 >> $dialogLst
   echo -n " 'Include'  'Include all files' "    >> $dialogLst
   echo -n " 'Exclude'  'Exclude all files' "    >> $dialogLst
   #
   fileCnt=0
   for fn in `cat $changedList`; do
      #
      if grep -q "$fn" $selectedList ; then
         echo -n " '$fn' '[*] $fn' " >> $dialogLst
      else
         echo -n " '$fn' '[ ] $fn' " >> $dialogLst
      fi
   done
   #
   $decho "done build_changed_list"
}

#
# choose_files( changedFiles, selectedFiles, title, [ execPrompt ] )
#     Returns: 0 when user is done
#     Returns: 1 on 'ESC' or exit
#              selectedFiles contains list of files selected by user
#
function choose_files()
{
   $decho "begin choose_files"
   #
   local changedFiles=$1       # not written to
   local selectedFiles=$2      # updated as per user selections
   local title="$3"
   local execPrompt="$4"
   #
   local filesDone=0
   local selection=""
   local retVal=""
   local retStatus=""
   #
   filesDefault="Add"          # default to top of list
   #
   # if none are selected, default to all selected
   #
   if [ ! -s $selectedFiles ] ; then
      $decho "defaulting to all selected"
      cp -f $changedFiles $selectedFiles
   fi
   #
   while [ "$filesDone" = "0" ] ; do
      #
      build_changed_list $changedFiles $selectedFiles .select.lst "$execPrompt"
      #
      show_files "$title" .select.lst 2> .result
      retVal=$?
      read selection < .result
      filesDefault=$selection   # set global default variable
      #
      case "$retVal" in
         1|255)                      # exit
            retStatus=1
            filesDone=1
           ;;
         2)                          # help
            sed -n /^######/,/^######/p $0 | sed 's/^#*//g' > pwl_update.README
            show_help pwl_update.README
           ;;
         0|3|4|5|6)                  # toggle project or operate on current
           #
           case "$selection" in
             "Add")
                retStatus=0
                filesDone=1
                ;;
             "Include")                  # operation "Include"
                cp -f $changedFiles $selectedFiles
                ;;
             "Exclude")
                echo -n "" > $selectedFiles
                ;;
             "Total"|"Skip"|"skip")
                xx=1 # do nothing
                ;;
             *)                      # list item selected
                if grep -q $selection $selectedFiles; then
                   grep -v $selection $selectedFiles > .tmp
                   cp -f .tmp $selectedFiles
                else
                   echo $selection >> $selectedFiles
                fi
                ;;
           esac       # end select item
           ;;
       esac    # end dialog response

   done    # end while configuring
   #
   $RM -f .tmp .result
   $decho "done choose_files"
   return $retStatus
}

#############################################################################
#
# dir_tree_list_all( dir_root [, resultsFile [, find_option  ] )
#         - builds a list of all files found in the given dir_root
#
function dir_tree_list_all()
{
   local lstDir=$1
   local resFn=".result"
   local findOpt=""
   #
   if [ "$2" != "" ] ; then          # optional second arg
      resFn="$2"
      if [ "$3" != "" ] ; then       #  optional third arg
         findOpt="$3"
      fi
   fi
   #
   local loc=$PWD
   cd $lstDir
   #
   # list directories and files within the current directory
   #
   find ${findOpt}   > $loc/.tmp_tree
   # find ${findOpt} -type d  >> $loc/.tmp_tree
   #
   cd $loc
   #
   # sort and remove leading ./ characters
   #
   sort -u .tmp_tree | sed -e "s/^\.//g" -e "s/^\///g" > $resFn
   #
   $decho "built list of files in $resFn from $lstDir using $findOpt"
}


#
# tar_files_list_all( dir_root, tar_list_file [ results_file] )
#        - builds a list of all files stored in every tar file list file
#              specified in tar_list
#          list is formatted as:  source_tar_file  filename
#
function tar_files_list_all()
{
   echo "" > .result
   #
   for listFn in `cat $2`; do
      tarBn=`basename $listFn .list`
      tarDir=`dirname $listFn`
      #
      # build 'source_tar_file  filename'
      #
      if [ -f $1/$listFn ]; then
         # I don't think this works! directories contain special chars
         #
         sed 's/^/$tarDir\/$tarBn /g' $1/$listFn >> .result
      fi
   done
   if [ ! -z "$3" ] ; then
      cp .result $3
   fi
}

#=========
#
# Confirm and Save
#
function confirm_save ()
{
   $decho "start confirm_save"
   #
   # don't question user if temporary configurations are identical to existing
   #  configurations
   #
   cmp -s $CFG_FILE_TMP $CFG_FILE
   if [ "$?" = "0" ] ; then
      $decho "same $CFG_FILE"
      rm -f $CFG_FILE_TMP
   fi
   cmp -s $DFT_FILE_TMP $DFT_FILE
   if [ "$?" = "0" ] ; then
      $decho "same $DFT_FILE"
      rm -f $DFT_FILE_TMP
   fi
   $PWL_PKGCONF --save CHECK
   if [ "$?" = "0"  -a ! -f "$CFG_FILE_TMP" -a ! -f "$DFT_FILE_TMP" ] ; then
      $decho "No changes made, nothing saved"
      return
   fi
   #
   # question the user
   #
   show_confirm "Save configuration for project" \
          "Do you wish to save your new configuration for project \"$CFG_BASE\" ?"
   if [ $? = "1" ] || [ $? = "255" ]; then
      $decho "No Configuation files have been harmed..."
      return
   fi
   #
   #
   $decho "Saving Project configuration"
   $PWL_PROJECTS --save
   #
   $decho "Saving package configuration"
   $PWL_PKGCONF --save
   #
   $decho "save project defaults"
   $PRJ_DEFAULTS --save
   #
   $decho "end save"
}

#
# usage( [ error message ] )
#    prints the given error message or a help screen parsed from this file
#    (help screen is delimited by "###" at the start of a line)
#    Program name and version can be specified in progInfo parameter.
#
function usage()
{
   if [ "$progInfo" != "" ] ; then
      echo -e "\n$progInfo"
   fi
   #
   # show error message ( if any)
   if [ ! "$1" = "" ] ; then
      echo -e "Error: $* \n"
      exit 1
   fi
   #
   # show usage as parsed from currently executing script
   #
   sed -n /^###$/,/^###$/p $0 | sed s/^#*//g
   #
   # exit nicely
   #
   exit 0
}

#
# default_define - parse defaults file, set variables, check version
#
function default_define()
{
   $decho "start default_define"
   status=0
   #
   # simply execute the temporary defaults file
   #
   if [ -f "$DFT_FILE_TMP" ] ; then
      . ./$DFT_FILE_TMP
   elif [ -f "$PWL_PRJ/$DEFAULT_CFG" ] ; then
      . ./"$PWL_PRJ/$DEFAULT_CFG"
   else
      $decho "default not found"
      status=1
   fi
   #
   # set our deviceName depending on our configuration
   # and only if rd_floppy or rd_target are defined
   #
   if [ -n "$rd_floppy" -o -n "$rd_target" ]; then
       if echo "$target_scheme" | grep -q "^fd"; then
           export deviceName="$rd_floppy"
       else
           export deviceName="$rd_target"
       fi
   fi
   #
   $decho "end default_define"
   return $status
}

#
# pwl_init_project( [ projectName ] ) - sets global variables for given project
#
function pwl_init_project()
{
   $decho "start pwl_init_project"
   usrName=`$WHOAMI`
   if  [ "$usrName" != "root" ] ; then
      usage "Please Login as root user to access projects"
      return 1
   fi
   #
   if [ "$1" = "" ] ; then
      #
      # get last default project
      #
      if [ ! -f "$PRJ_LAST" ] ; then
         usage "No Project"
      fi
      . ./$PRJ_LAST
   else
      #
      # parameter given is the Project name
      #
      export CFG_BASE=$1
   fi
   #
   # reset these variables for new project directory
   #
   export PWL_PRJ="$PRJ_DIR"/"$CFG_BASE"
   export CFG_FILE="$PWL_PRJ"/"$CFG_Default"
   export CFG_FILE_TMP="$PWL_PRJ"/."$CFG_Default"
   export DFT_FILE="$PWL_PRJ"/"$DEFAULT_CFG"
   export DFT_FILE_TMP="$PWL_PRJ"/."$DEFAULT_CFG"
   #
   #
   $decho "end pwl_init_project"
   return 0
}

   #
   # do these - seems like a good idea :-?
   #
   set -h +o posix
   set_geometry `stty size 2>/dev/null`

