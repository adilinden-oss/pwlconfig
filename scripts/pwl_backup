#!/bin/bash
#
###
# Usage: pwl_backup [ cmd [ parmeters ] ... ]
#
#     Performs operations on PWL backup files. Works
#     from command line or interactively.
#
#   "cmd"       "parameters"   Results
#   --help                     This help screen
#   --project     project      Select project (default is last one used)
#   --all                      Backup entire Embedded_Build Directory
#   --current                  Backup current project
#   --extracted                Backup current project as extracted
#   --restore     filename     Restore given backup file
#   --include     <dir type>   Build list of directories to include
#   --all-included             Backup Items Included
#
#  Where:
#   <dir type> specify type of files to be backuped, one of:
#       "bin"       Include PWL Binary Tools
#       "scripts"   Include PWL Scripts
#       "packages"  Include PWL Packages
#       "sources"   Include PWL package source files
#       "projects"  Include All PWL Projects
#       "device"    Include files extracted at device mount point
#
#    project Name is the name of a current PWL project
#
#  Note: backup file names are generated by incrementing minor
#        version of previous file with same base name.
#
###
#
# History:
#   v0.86 - added command line options and more documentation
#   v0.85 - dialog box tested, command line options not complete
#   v0.1 - created
#
# Comments:
#
######
#pwl_backup.README
#
#  Creates a backup for the current project or most any other
#  combination of PWL directories and files.  Also restores
#  files from previous backups.
#
#  o Backup Current Project
#
#    Builds a backup file for all the project files for the current
#    project. Extracted files are not included, all custom files
#    are included.  Use this file to archive or transport your
#    project.
#
#    File created: projectname-0.0.tgz, updated for latest
#    version.
#
#  o Backup Extracted Project: ...
#
#    Builds a backup file from the extracted files for the
#    current project.
#
#    File Created: projectame_mnt-0.0.tgz, updated for latest
#    version.
#
#  o Backup Entire Embedded_Build Directory
#
#    Does it all into one huge file. Well, almost all. The
#    backup directory and extracted files are not included,
#    but it is one huge file.
#
#    File created is "Embedded_Build-0.0.tgz", updated for
#    latest version.
#
#  o Restore from backup file
#
#    Lists all backup files and extracts the contents of the
#    the selected file.
#
#    NOTE: to restore scripts, you must use:
#
#       Embedded_Build# tar -xzf backups/pwl_..scr...
#
#    Otherwise, you are replacing the script file currently being
#    intrepreted, which leads to some real strange errors!
#
#  o Backup items included below
#
#    Builds a backup file including all the items selected in
#    the selection list.  These are not project specific, all
#    files start with pwl prefix.
#
#    File created is "pwl_xxx-0.0.0" where the xxx suffix is
#    generated from selected items as follows:
#
#      pwl [_item ...]-<major>.<minor>.tgz
#
#    where included item(s):            Addes suffix:
#       Include PWL Binary Tools            _bin
#       Include PWL Scripts                 _scr
#       Include PLW Packages                _pkg
#       Include PWL Sources                 _src
#       Include All PWL Projects            _prj
#       Include Device files ...            _dev
#
#    Combinations of these suffixes are applied in the order shown
#    above, not the order they are selected.
#
#  Filenames are generated as:
#
#   <filename>-<major>.<minor>.tgz
#
#  If other backup files are found that start with <filename>,
#  the minor number of that file is incremented to create
#  a suggested new filename.
#
#  If you want to change the filename, just type in a new name.
#  (for best results, maintain a version number in the filename)
#
#  When multiple individual items are selected, the filename
#  base is built from the items selected.  Since this base name
#  is always the same, the version number helps keep track of
#  the latest backup of these items.
#
#END
######
#
#=============================================================================
#
# include generally handy functions
#
if [ -f "./scripts/pwl_functions" ] ; then
  . ./scripts/pwl_functions
elif [ -f "./pwl_functions" ] ; then
  . ./pwl_functions
else
  echo "script pwl_functions not found"
fi
#
PWL_BACKUP_VER=${PWL_REL_VER}".1"
#
#
#=============================================================================
#
# show_pwl_backup ( select.lst ) - show checklist of items
#
function show_pwl_backup()
{
   if [ -z "$pwl_backupDefault" ] ; then
      pwl_backupDefault="buCur"
   fi
   echo -n $DIALOG --title "'Backup/Restore Projects and Environment Menu'" \
                   --backtitle "'$backtitle'"      \
                   --menu                          \
"'Select Backup Command or enable options            Project: $CFG_BASE'" \
              $ROWS $COLS $((ROWS-8))                                 \
             "'$pwl_backupDefault'" > .dialog

   cat $1 >> .dialog
   . ./.dialog
}

#
# build_pwl_backup - create dialog of operations and selectable items
#
function build_pwl_backup ()
{
   $decho "start build_pwl_backup"
   #
   # insert command operations in menu
   #
   echo -n > $1
   echo -n " 'buCur'   'Backup Current Project: $CFG_BASE' "      >> $1
   echo -n " 'buExt'   'Backup Extracted Project: $CFG_BASE/$PRJ_MNT' "     >> $1
   echo -n " 'buAll'   'Backup Entire Embedded_Build Directory' " >> $1
   echo -n " 'Restore' 'Restore From backup file -->' "           >> $1
   echo -n " 'skip'    '------' "                                 >> $1
   echo -n " 'buSel'   'Backup Items Included Below:'  "          >> $1
   echo -n " 'buBin'   '[${buBin:+*}] Include PWL Binary Tools' " >> $1
   echo -n " 'buScr'   '[${buScr:+*}] Include PWL Scripts' "      >> $1
   echo -n " 'buPkg'   '[${buPkg:+*}] Include PWL Packages' "     >> $1
   echo -n " 'buSrc'   '[${buSrc:+*}] Include PWL Sources' "      >> $1
   echo -n " 'buPrj'   '[${buPrj:+*}] Include All PWL Projects' " >> $1
   echo -n " 'buDev'   '[${buDev:+*}] Include Extracted Files at $deviceMnt' "  >> $1
   #
   $decho "end build_pwl_backup"
}

#
# pwl_backup_init - Initialize project environment
#
function pwl_backup_init()
{
   $decho "start pwl_backup_init $*"
   #
   # init stuff
   #
   pwl_init_project
   default_define          # set global variables for project defaults
   #
   #
   $decho "done pwl_backup_init"
}

#=============================================================================
#
# backup_get_filename
#
function backup_get_filename()
{
   $decho "start backup_get_filename"
   backupFn="$1-"
   lastFile=""
   #
   # list existing files that start with given name
   #
   ls -t $BKS_DIR/${backupFn}* 2> /dev/null > .exists.lst
   #
   if [ ! -s .exists.lst ] ; then
      #
      # no other backup files exists, set to initial version
      #
      verMajor="0"
      verMinor="1"
   #
   else
      # listed in reverse age order, take newest one off the top
      #
      lastFile="`head -1 .exists.lst`"
      #
      # parse existing version, increment minor version number
      #
      ver=${lastFile##*$backupFn}
      ver=${ver%%".tgz"}            # remove extension
      #
      verMajor=${ver%%.*}           # record Major number
      #
      verMinor=${ver##[0-9].}       # record Minor number
      verMinor=${verMinor%%[^0-9]}       #  strip alphas
      #
      verMinor="$(( verMinor+1 ))"  # increment minor number
    fi
    #
    # now build filename
    #
    backupFn="$backupFn${verMajor}.${verMinor}.tgz"
    #
    $RM .exists.lst
    $decho "end backup_get_filename"
}

#
# backup_files
#
function backup_files()
{
   $decho "start backup_files"
   #
   backupFn="$1"
   shift
   filesLst="$*"
   #
$dmon
   if [ ! -z "$filesLst" ] ; then
      #
      # create backup directory if it doesn't exist
      #
      if [ ! -d "$BKS_DIR" ] ; then
        mkdir -p $BKS_DIR
      fi
      #
      backup_get_filename $backupFn
      if [ "$lastFile" != "" ] ; then
         lastPrompt="Previous File found: `basename $lastFile`.  "
      fi
      #
      # prompt to verify filename
      #
      get_string "Backup Files to: $backupFn" \
        "$lastPrompt Type new filename or Press Enter to accept:" \
        usrFn $backupFn
      #
      if [ "$?" = "0" ] ; then
         if [ ! -z "$usrFn" ] ; then
            if [ -f $BKS_DIR/"$usrFn" ] ; then
               show_confirm "File $usrFn Exists!" \
                   "Do you want to replace the existing backup file: $usrFn"
               if [ "$?" != "0" ] ; then
                  return
               fi
            fi
            #
            # Note: filenames in filesLst are prefixed with baseprj
            #       you'd better extract from directory we created from!
            #
            $TAR -clpvzf $BKS_DIR/$usrFn $filesLst
            show_message "Created Backup" "Backup file $usrFn was created. Use the \"Restore Backup\" option to extract later."
         fi
      fi
   fi
}

#
# backup_current
#    archive the project files for the current project, excluding
#    extracted files in "mnt" and "mnt_tmp" directories.
#
function backup_current()
{
   $decho "start backup_current"
   #
   filesLst="$PRJ_DIR/$CFG_BASE --exclude mnt --exclude mnt_tmp"
   #
   backupFn=$CFG_BASE
   if [ "$1" != "" ] ; then
      backupFn="$1"
   fi
   #
   backup_files $backupFn $filesLst
}

#
# backup_extracted - backups all files extracted for the current project
#
function backup_extracted()
{
   $decho "start backup_extracted"
   #
   filesLst="$PRJ_DIR/$CFG_BASE/$PRJ_MNT"
   backupFn="${CFG_BASE}_mnt"
   #
   backup_files $backupFn $filesLst
}

#
# backup_all
#
function backup_all()
{
   $decho "start backup_all"
   #
   filesLst="$baseprj --exclude $BKS_DIR --exclude mnt"
   backupFn="Embedded_Build"
   #
   backup_files $backupFn $filesLst
}

#
# backup_included
#
function backup_included()
{
   $decho "start backup_included"
   filesLst=""
   backupFn="pwl"
   if [ "$buBin" = "1" ] ; then
      filesLst="$filesLst $baseprj/bin/*"
      backupFn=$backupFn"_bin"
   fi
   if [ "$buScr" = "1" ] ; then
      filesLst="$filesLst $SCR_DIR/* $baseprj/pwlconfig"
      backupFn=$backupFn"_scr"
   fi
   if [ "$buPkg" = "1" ] ; then
      filesLst="$filesLst $PKG_DIR/*"
      backupFn=$backupFn"_pkg"
   fi
   if [ "$buSrc" = "1" ] ; then
      filesLst="$filesLst $SRC_DIR/*"
      backupFn=$backupFn"_src"
   fi
   if [ "$buPrj" = "1" ] ; then
      filesLst="$filesLst $PRJ_DIR/*"
      backupFn=$backupFn"_prj"
   fi
   if [ "$buDev" = "1" ] ; then
      filesLst="$filesLst $deviceMnt/*"
      backupFn=$backupFn"_dev"
   fi
   #
   backup_files $backupFn $filesLst
}

#
# backup_restore
#
function backup_restore()
{
   $decho "start backup_restore"
   #
   echo -n "" > .exists.lst
   for bkFn in $BKS_DIR/* ; do
      echo -n  " '$bkFn' '$bkFn -->' " >> .exists.lst
   done
   #
   show_files '"Restore from Backup File"' .exists.lst  2> .result
   #
   retVal=$?
   read selection <.result
      case "$retVal" in
         1|2|255)                      # exit
           xx=1
           ;;
         0|3|4|5|6)                    # restore selected file
           #
           $TAR -xzvf $selection > .result
           show_results  .result "Restored Files from:$selection"
           ;;
      esac
   #
   $RM .exists.lst
   $decho "done backup_restore"
}

#=============================================================================
#
#
# menu_pwl_backup - do backup/restore commands and select items to backup
#
function menu_pwl_backup()
{
   $decho "start menu_pwl_backup"
   #
   # always start from base directory (makes extract easier)
   #
   # cd $basedir
   #
   pwl_backupDone=0
   #
   while [ "$pwl_backupDone" = "0" ]; do
      #
      #  build list ***
      #
      build_pwl_backup .select.lst
      #
      show_pwl_backup .select.lst 2>.result

      retVal=$?
      read selection <.result
      pwl_backupDefault=$selection

      case "$retVal" in
         1|255)                      # exit
            pwl_backupDone=1
           ;;
         2)                          # help
            sed -n /^######/,/^######/p $0 | sed 's/^#*//g' > pwl_backup.README
            #
            show_help pwl_backup.README menu_backup
           ;;
         0|3|4|5|6)                  # toggle project or operate on current
           #
           case "$selection" in
              "buCur")
                 backup_current
                 ;;
              "buExt")
                 backup_extracted
                 ;;
              "buAll")
                 backup_all
                 ;;
              "Restore")
                 backup_restore
                 ;;
              "buSel")
                 backup_included
                 ;;
              "skip")
                 :
              ;;
              "buBin"|"buScr"|"buPkg"|"buSrc"|"buPrj"|"buDev")
                  if [ "$(( $selection ))" = "1" ] ; then
                     eval $selection=
                  else
                     eval $selection="1"
                  fi
              ;;
           esac       # end select item
           ;;
       esac    # end dialog response

   done    # end while configuring

   #
   # return clean
   #
   $RM  .select.lst .result .dialog  .show_result pwl_backup.README
   $decho "end menu_pwl_backup"
   return 0
}

#=============================================================================
#
# main - parse command line
#
function pwl_backup_main()
{
   progInfo="`basename $0` - Version $PWL_BACKUP_VER"
   if [ "$backtitle" = "" ] ; then
      backtitle=$progInfo
   fi
   pwl_backup_init INIT_ONLY   # INIT_ONLY is a flag for pwl_backup only- remove this!
   #
   # parse command line and execute commands or do interactive
   #
   gotOne=0
   usrMode="C"
   while [ "$1" != "" ] ; do
      $decho "parse $*"
      case "$1" in
         "--help")                   #--help
            usage
            ;;
         "--project")                #--project - assign current project
            pwl_init_project $2
            if [ "$2" != "" ] ; then
               shift
            fi
            ;;
         "--init")                    #--init does nothing ?
            pwl_backup_init $2
            gotOne=1
            if [ "$2" != "" ] ; then
               shift
            fi
            ;;

         "--current")                 #--current - current project files
            gotOne=1
            backup_current
            ;;
         "--extracted")               # extracted files for project
            gotOne=1
            backup_extracted
            ;;
         "--all")                     # all files in Embedded_Build
            gotOne=1
            backup_all
            ;;
         "--restore")                 #--restore path/file or BKS_DIR/file
            gotOne=1
            tmpFn="$2"
            if [ ! -f "$tmpFn" ] ; then
                 tmpFn="$BKS_DIR/"
                 if [ ! -f "$tmpFn" ] ; then
                    echo "File not found $2"
                    exit 0
                 fi
            fi
            $TAR -xzvf $tmpFn
            ;;
         "--include")                 # parameter list of stuff to backup
            gotOne=1
            case "$2" in              # finish list with --all-included
              "bin")      buBin=1 ;;
              "scripts")  buScr=1 ;;
              "source")   buSrc=1 ;;
              "packages") buPkg=1 ;;
              "projects") buPrj=1 ;;
              "device")   buDev=1 ;;
              *)  ;;
            esac
            shift
            ;;

         "--all-included")             # bakup included files
            gotOne=1
            backup_included
            ;;

         *) usage "Invalid command $*"
            ;;
      esac
      shift
   done
   #
   # do interactive operation
   #
   if [ $gotOne = "0" ] ; then
      #
      usrMode="I"      # enable interactive mode
      menu_pwl_backup
   fi
}

# start here
  debug_mode 0        # set to 1 to enable debug macros

  $decho "START $0"

  pwl_backup_main $*

  $decho "END $0"

  exit 0
#
# end
#
