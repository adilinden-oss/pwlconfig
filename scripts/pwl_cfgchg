#
# build_packages( pkgLst, showLstFn )
#    pkgLst lists packages and the package filename
#    results stored in showLstFn
#
function build_packages()
{
   pkgLst=$1
   showLst=$2
   #
   gotOne=0
   echo -n "" > $showLst
   for packageFn in `cat $pkgLst`; do
      prjListFn="`basename $packageFn`"
      if [ -f $PWL_PRJ/"."$prjListFn ] ; then
         echo -n " '$pkgLstFn' '$packageFn' " >> $showLst
         gotOne=1
      fi
   done
   #
   if [ "$gotOne" = "1" ] ; then
      echo -n " 'skip' '-----' " >> $showLst
   fi
   #
   # show all other matching package files
   for packageFn in `cat $pkgLst`; do
      prjListFn="`basename $packageFn`"
      echo -n " '$pkgLstFn' '$packageFn' " >> $showLst
   done
}

#
# choose_package( listFile, fileInDuplicatePackages )
#    shows a list of packages that all contain the same file
#    user picks one or none
#
function choose_package()
{
   showLst=$1
   prjFn=$2
   #
   retVal=1
   selection=""
   while [ "$retVal" != "0" ] ; do

      show_files "Select Package for: /$prjFn" $showLst 2> .result
      retVal=$?
      read selection < .result
      if [ "$retVal" = "1" ] ; then
         return 1
      fi
      if [ "$selection" = "skip" ] ; then
         retVal=1
      fi
      grep "$selection:$prjFn" $PKG_INDEX > .result
      if [ ! -s .result ] ; then
         retVal=1
      fi
   done
   return 0
}

#
# make_package_index - build 'indexes' for packages and project list files
#
function make_package_index()
{
   $decho "start make_package_index"
   retVal=0
   #
   # rebuild list index if not already built
   # TO DO: verify dates, rebuild if out of date
   #
   if [ -f $PKG_INDEX ] && [ -f .indexfiles.list ] ; then
      xx=1  # do nothing
   else
      #
      # build list files
      #
      $decho "building list files"
      $PWL_LISTER > /dev/null
      #
      # build index database of packages
      #
      $decho "building index file"
      $PWL_LISTER --index -c $PKG_INDEX
      #
      # build list of all files found in packages
      #
      cut -d":" -f2 $PKG_INDEX | sort -u > .indexfiles.list
      #
   fi
   #
   # build comprehensive list of current project files,
   #    do not check for directories, too many matches!!!
   #
   if [ -f $CFG_FILE ] ; then
      echo -n "" > .tmp.lst
      for pkgListFn in `cat $CFG_FILE`; do
          grep -v "/$" $PWL_PRJ/`basename $pkgListFn` >> .tmp.lst
      done
      if [ -f $PWL_PRJ/$CUSTOM_LST ] ; then
         cat $PWL_PRJ/$CUSTOM_LST >> .tmp.lst
      fi
      sort -u .tmp.lst > .prjFiles.list
   else
      rm  -f .prjFiles.list # don't use old project list
      retVal=1
   fi
   #
   $RM -f .tmp.lst
   $decho "end make_package_index"
   #
   return $retVal
}


#=============================================================================
#
# update_package_selection( prjFn )
#     provides a choice of packages, with existing packages on top
#     Returns .result file with list of files
#
function update_package_select()
{
   # $decho "start update_package_select"
   #
   local prjFn=$1
   #
   rm -f .result
   pkgCnt="`grep -c $prjFn$ $PKG_INDEX`"
   if [ "$pkgCnt" = "0" ] ; then
      return 1
   fi
   #
   # build list of all packages containing given file
   #
   grep "$prjFn$" $PKG_INDEX | cut -f1 -d":" | sort -u > .tmp.lst
   if [ $pkgCnt = "1" ] ; then
      cat .tmp.lst | head -1 > .result
      return 0
   fi
   #
   # default if any package list configuration files exists
   #
   if [ "$udFnPr" != "1" ] ; then
      # no prompting, take first one that already exists and leave
      #
      for packageFn in `cat .tmp.lst`; do
         #
         prjListFn="`basename $packageFn`"
         if [ -f $PWL_PRJ/"."$prjListFn ] ; then
            echo $packageFn > .result
            return 0
         fi
      done
      # no prompting, none of the packages containing this file exist
      #     in current configuration, take first one and leave
      cat .tmp.lst | head -1 > .result
      return 0
   fi
   #
   # Build list of packages for dialog
   #
   build_packages .tmp.lst .show.lst
   #
   # operate dialog screen, select one or exit to select none
   #
   choose_package .show.lst $prjFn
   #
   # returns .result file
   #
   return 0
}

#
# update_remove_package_file( oldFile, fromPkg, msgFn )
#
#   Removes a configured file from the given package configuration
#
function update_remove_package_file()
{
   $decho "start update_remove_package_file"
$dmon
   local oldFn=$1
   local oldPkgPath=$2
   #
   local oldPkg=`basename $oldPkgPath`
   #
   # Remove old File from the Old package configuration
   #
   if [ ! -s $PWL_PRJ/.$oldPkg ] ; then
      if [ ! -s $PWL_PRJ/$oldPkg ] ; then
         echo "Could not find: $oldPkg to remove $oldFn from" >> $3
         return
      else
         cp $PWL_PRJ/$oldPkg $PWL_PRJ/.$oldPkg # create temp config file
      fi
   fi
   if [ -s $PWL_PRJ/.$oldPkg ] ; then
      #
      # remove it and update the temporary configuration file
      #
      $TEST_ONLY grep -v "$oldFn" $PWL_PRJ/.$oldPkg > .tmp
      $TEST_ONLY cp .tmp $PWL_PRJ/.$oldPkg
   fi
   #
   [ "$3" != "" ] && echo "Removed Packaged file: /$prjFn" >> $3
   #
   # $decho "end update_remove_package"
   return 0
}

#
# update_add_package( prjFilename, [updates file] )
#
function update_add_package()
{
   # $decho "start update_add_package"
   #
   local prjFn=$1
   #
   # project file exists in a package file(s), prompt to select
   #
   if update_package_select $prjFn ; then
      pkgInfo="`cat .result`"
   else
      [ "$2" != "" ] && echo "Could not find packaged file:/$prjFn" >> $2
      return 1     # no file found
   fi
   #
   pkgLstFn=${pkgInfo%%:*}
   pkgCfgFn="`basename $pkgLstFn`"
   #
   if [ "$TEST_ONLY" = "" ] ; then
      if [ ! -f $PWL_PRJ/.$pkgCfgFn ] ; then
         if [ -f $PWL_PRJ/$pkgCfgFn ] ; then
            cp -f $PWL_PRJ/$pkgCfgFn $PWL_PRJ/.$pkgCfgFn
         fi
      fi
      #
      # include package as one of the configured packages
      #
      echo $pkgLstFn >> $CFG_FILE_TMP
      #
      # include file as enabled in this package
      #
      echo $prjFn >> $PWL_PRJ/.$pkgCfgFn
   fi
   #
   [ "$2" != "" ] && echo "  Added Packaged file: /$prjFn  from $pkgCfgFn" >> $2
   #
   # $decho "end update_add_package"
   return 0
}

#
# update_remove_custom( oldFn msgFile)
#
function update_remove_custom()
{
   $decho "start update_remove_custom"
   #
   customFn=$1
   #
   local gotOne="1"  # default for testing only
   userMode="C"
   if [ "$TEST_ONLY" = "" ] ; then
      #
      # specify soure file and destination path
      #
      if $PWL_CUSTOM --delete $customFn ; then
         gotOne=1
      else
        [ "$2" != "" ] && echo "Custom file not found: /$customFn" >> $2
        gotOne=0
      fi
   fi
   #
   if [ "$2" != "" -a "$gotOne" = "1" ] ; then
      echo "  Deleted custom file: /$customFn" >> $2
   fi
   userMode="I"
   #
   $decho "done update_remove_custom"
}

#
# update_add_custom( newFn, mntPath, msgFile )
#     The given newFn (located at given mntPath) is added as a
#     custom file
#
function update_add_custom()
{
   # $decho "start update_add_custom"
   #
   local customFn=$1
   local mntPath=$2
   #
   # yes, add directories, other functions should remove them
   #   if they are not wanted.
   #
   #
   userMode="C"
   if [ "$TEST_ONLY" = "" ] ; then
      #
      # specify soure file and destination path
      #
      if $PWL_CUSTOM --add $mntPath/$customFn "$customFn" ; then
        [ "$3" != "" ] && echo "Added new custom file: /$customFn" >> $3
      else
        [ "$3" != "" ] && echo "Custom file not found: /$customFn" >> $3
        gotOne=0
      fi
   else
       [ "$3" != "" ] && echo "To do: Add new customfile: /$customFn" >> $3
   fi
   #
   userMode="I"
   #
   # $decho "done update_add_custom"
}

#=============================================================================
#
# compare_ignore( changedFiles, results)
#     checks all the changed files to see if they are in a
#     directory which the user wants to ignore. If so, they
#     are removed from the final results list.
#     ChangedFiles must be listed as:
#            x filename
#     where the x is '<' or '>'
#
function compare_ignore()
{
   $decho "start compare_ignore"
   #
   changesLst=$1
   #
   cp $changesLst .tmp.lst
   cp $changesLst .tmp2.lst  #allows all root dirs to be selected
   #
   for rootFn in `cat .root.lst` ;
   do
      if [ "$(( $rootFn ))" != "1" ] ; then
         # not enabled, remove from changes
         grep -v "^..$rootFn" .tmp.lst > .tmp2.lst
         cp .tmp2.lst .tmp.lst
      fi
   done
   sort -u .tmp2.lst > $changesLst
   #
   $RM .tmp.lst .tmp2.lst
   #
   $decho "end compare_ignore"
}

#
# changed_by_dir - "diffs" the given directories, ignores
#             diff errors with non-existant and special files.
#
function changes_by_dir()
{
   $decho "start changes_by_dir"
   newMntName=$1
   tmpMntName=$2
   #
   # remove any files that indicate changes
   #
   rm -f .touched.lst .new.lst .removed.lst .tmp.lst .tmp2.lst
   #
   # change root to allow diff to work with links that point to "/"
   # diff the directories from the given mount point
   #
   # /usr/sbin/chroot $baseprj diff -raNq $newMntName $tmpMntName >  .tmp.lst 2>&1
   diff -raNq $newMntName $tmpMntName > .tmp.lst 2>&1
   if [ ! -s .tmp.lst ] ; then
      $decho "changes_by_dir none"
      return
   fi
   #
   # handle diff errors:
   #   1. files that link to non-existant files - ignore
   #   2. character/fifo/block file types   - ignore
   #   3. Only in mnt/xxx: filename (we remove Only, replace ": " with "/")
   #   4. files ./mnt_tmp/x/x/xxx and ./mnt/x/x/xxx - leave this message
   #   (now second field of diff results is a filename)
   #
   grep -v "No such file" .tmp.lst | grep -v "special file" | \
        grep -v "fifo" |sed "s/Only //g" | sed "s/: /\//g" > .tmp2.lst
   #
echo created .tmp2.lst with Only support
$dmon
   #
   if [ ! -s .tmp2.lst ] ; then
      $decho "changes_by_dir nothing significant"
      return
   fi
   #
   # generate list of changed files (remove mounted directory prefix)
   #   and create a prefix to support compare_ignore
   #
   cut -d" " -f2 .tmp2.lst | sed "s!$tmpMntName/!  !g" | \
       sed "s!$newMntName/!  !g" > .changed.lst

echo just filenames
$dmon
   #
   # remove those files not selected by the user
   #
   compare_ignore .changed.lst
   if [ ! -s .changed.lst ] ; then
      $decho "changes_by_dir none selected"
      return
   fi
   #
   # Now record why each file changed:
   #   1. file was touched
   #   2. file was removed
   #   3. file was added
   #
   for newFn in `cat .changed.lst`; do
      #
      if [ ! -e $newMntName/$newFn ] ; then     # file not found in new fs
         $decho "file to be removed: $newFn"    # - remove it from the project
 # $dmon
         echo $newFn >> .removed.lst

      elif [ ! -e $tmpMntName/$newFn ] ; then   # file was found in new fs
         $decho "file to be added: $newFn"      # - add it to the project
         echo $newFn >> .new.lst

      else                                      # file exist but is changed
         $decho "files touched, to be added: $newFn"
         echo $newFn >> .touched.lst
      fi
   done
   #
   $RM -f .tmp.lst .tmp2.lst .changed.lst
   $decho "end changes_by_dir"
}

#=============================================================================

#=============================================================================
#
# changes_prompt( newMntPt, tmpMntPt, msgFile )
#     prompts user what to do with the changed files listed int
#     the .touched.lst, new.lst and .old.lst files
#
function changes_prompt()
{
   $decho "start changes_prompt"
   newMntName=$1
   tmpMntPt=$2
   #
   msgFn=$3
   #
   # show all touched files - add user selected files as custom files
   #
   if [ -s .touched.lst ] ; then
      choose_files .touched.lst .choosen.lst "Files that do not match Packaged files"
      if [ "$?" = "1" ] ; then
         $decho "none choosen"
         return
      else
         #
         for newFn in `cat .choosen.lst`; do
           update_add_custom $newFn $newMntName $msgFn
         done
      fi
   fi
   #
   # show all new files found add these from package or as custom files
   #
   if [ -s .new.lst ] ; then
      #
      echo -n "" > .choosen.lst
      #
      if [ "$udPkg" = "1" ] ; then
         #
         # see if new file is in list of available packages
         #
         sort .new.lst .indexfiles.list | uniq -d > .pkgfiles.list
         #
         if [ -s .pkgfiles.list ] ; then
            choose_files .pkgfiles.list .choosen.lst "Found Packaged Files not in Configuration"
            #
            if [ "$?" = "1" ] ; then
               return
            elif [ -s .choosen.lst ] ; then
               for newFn in `cat .choosen.lst`; do
                  $decho adding $newFn
                  update_add_package $newFn $msgFn
               done
            fi
         fi
      fi
      #
      # add all new files not selected from packages as custom files
      #
      sort .choosen.lst .new.lst | uniq -u > .tmp.lst
      #
$dmon
      if [ -s .tmp.lst ] ; then
         choose_files .tmp.lst .choosen.lst "Files Found not in Configuration"
         if [ "$?" = "1" ] ; then
            return
         else
            for newFn in `cat .choosen.lst`; do
               update_add_custom $newFn $newMntName $msgFn
            done
         fi
      fi
   fi
   #
   # show all old files found - remove from configuration
   #
   if [ -s .removed.lst ] ; then
      choose_files .removed.lst .choosen.lst "Configured files not found"
      if [ "$?" = "1" ] ; then
         return
      else
         # removed file may be custom or packaged file
         #
         for oldFn in `cat .choosen.lst`; do
            if update_package_select `basename $oldFn` ; then
               read fromPkg < .result
               $decho "remove package file $oldFn from $fromPkg"
$dmon
               update_remove_package_file $oldFn $fromPkg  $msgFn
            else
               $decho "remove custom file $oldFn"
               update_remove_custom $oldFn $msgFn
            fi
         done
      fi
   fi
   $RM -f .touched.lst .new.lst .removed.lst .choosen.lst
   $decho "end changes_prompt"
}

#
# update_changes ( newMntName, tmpMntPoint  )
#   given a list of files that differ from the extracted configuration
#   and the "given" file list (mounted device, directory or file list)
#   checks each file to see if it needs to be added to the configuration.
#
function update_changes()
{
   $decho "start update_changes"
   newMntName=$1
   tmpMntPt=$2
   #
   # check to see if changes exists, verify each changed file
   #
   echo -n "" > .updates.msg
   #
   # find the files and anounce differences to user (custom or package)
   #
   changes_prompt $newMntName $tmpMntPt .updates.msg
   #
   # if no changes exists or the filesystem differences don't affect
   # the configuration then announce and leave
   #
   if [ ! -s .updates.msg ] ; then
      $decho "no changes made"
      usrMode="I"
      case "$fsType" in
         FS_DEV) srcFs="on $deviceName at $updateMnt"
         ;;
         FS_DIR) srcFs="at directory $updateMnt"
         ;;
         FS_LIST) srcFs="listed in $newFileLst"
         ;;
      esac
      show_message "Update Configuration Done" \
             "Configuration for project \"$CFG_BASE\" matches files $srcFs"
      return
   fi
   #
   # Save these changes (if updates enabled)
   #
   if [ "$TEST_ONLY" = "" ] ; then
      show_results .updates.msg "Updated Configuration Results"
      confirm_save
   else
      show_results .updates.msg "Configuration Differences (No Changes Made!)"
   fi
   $RM -f .updates.msg
   $decho "update_changes"
}

#=============================================================================
#
# cmd_update_configuration
#    allows project configuration files
#    to be updated from an existing file system
#
function cmd_update_configuration()
{
   $decho "start cmd_update_configuration"
   #
   #  extract old/current configuration into temporary directory
   #  (not from the temporary configuration files - make sure user is ready)
   #
   confirm_save
   #
   # now build indexes, incase any temporary files were saved
   #
   make_package_index
   #
   #  extract the project configuration if any project files are newer
   #    than "temp mount pt" directory
   #
   tmpMntPt="$PWL_PRJ/mnt_tmp/$PRJ_MNT"
   newestFn="`ls -rat $PWL_PRJ | grep -v "^\." | tail -1`"
   #
   if [ "$newestFn" != "mnt_tmp" ] ; then
      #
      if [ -d $tmpMntPt ] ; then
         rm -rf $tmpMntPt
      fi
      mkdir -p $tmpMntPt
      #
      oldDBG=$debugMode
      usrMode="C"
      $decho "Extracting all configured files"
      (. ./pwlconfig --extract $tmpMntPt)
      sync                # wait for tar
      usrMode="I"
      debug_mode $oldDBG
   fi
   #
   # find files that have changed, check dates if enabled
   #
   if [ "$fsType" = "FS_LIST" ] ; then
      #
      updateMnt=$tmpMntPt
      changes_from_list $tmpMntPt $newFileLst
      #
   else
      changes_by_dir  $updateMnt $tmpMntPt
   fi
$dmon
   #
   # do something with the files that are different,
   #
   update_changes $updateMnt $tmpMntPt
   #
   $RM .tmpxtract.lst
   #
   $decho "end cmd_update_configuration"
}
#=============================================================================
#
# build a configuration from an existing file system
#
function cmd_configure_new()
{
   local srcMntPt="$1"
   #
   # backup existing project if any
   #
   if [ -d $PWL_PRJ ] ; then
      echo "backing up $PWL_PRJ"
      rm -rf ${PWL_PRJ}.bak
      mv -f $PWL_PRJ $PWL_PRJ.bak
   fi
   mkdir -p $PWL_PRJ
   #
   # now build indexes, incase any temporary files were saved
   #
   make_package_index
echo "made package index"
$dmon
   #
   # list all files on given device
   #
   find $srcMntPt/*           | sort > .entries.list
   find $srcMntPt/* -type d   | sort > .dirs.list
   #
   # format list to remove root directory and add "  " for compare
   #
   comm -23 .entries.list .dirs.list | sed "s!^${srcMntPt}\/!  !g" > .files.list
   #
   #
   # remove any directories/files not requested by user
   #
   compare_ignore .files.list
   #
   # check every file to find which package it may come from
   #   -add as package or custom file
   #
   udFnPr="1"  # take first package, not optimized, but should work
   #
   echo -n "" > .newresults
   for fn in `cat .files.list` ; do 
      #
      if grep -q ":$fn$" $PKG_INDEX ; then   
         echo -n "."
         update_add_package $fn  .newresults  2> /dev/null
      else
         echo -n "c"
         update_add_custom  $fn  $srcMntPt .newresults 2> /dev/null
      fi
   done
   #
   sort .newresults > .results
   show_results .results
   #
   $RM .newresults .results
   #
   confirm_save
   $decho "done cmd_configure_new"
}

