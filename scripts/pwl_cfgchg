
#
#  build_changed_list( changedFiles, selectedFiles, dialogLst)
#
function build_changed_list()
{
   $decho "start build_changed_list"
   #
   changedList=$1
   selectedList=$2
   dialogLst=$3
   #
   #  Include options to add or remove all files from this package
   #
   echo -n > $dialogLst
   echo -n " 'Add'      'Add Selected Files to $CFG_BASE Configuration' " >> $dialogLst
   echo -n " 'Skip'     '----' "                 >> $dialogLst
   echo -n " 'Include'  'Include all files' "    >> $dialogLst
   echo -n " 'Exclude'  'Exclude all files' "    >> $dialogLst
   #
   fileCnt=0
   for fn in `cat $changedList`; do
      #
      if grep -q "$fn" $selectedList ; then
         echo -n " '$fn' '[*] $fn' " >> $dialogLst
      else
         echo -n " '$fn' '[ ] $fn' " >> $dialogLst
      fi
   done
   #
   $decho "done build_changed_list"
}

#
# build_packages( pkgLst, showLstFn )
#    pkgLst lists packages and the package filename
#    results stored in showLstFn
#
function build_packages()
{
   pkgLst=$1
   showLst=$2
   #
   gotOne=0
   echo -n "" > $showLst
   for packageFn in `cat $pkgLst`; do
      prjListFn="`basename $packageFn`"
      if [ -f $PWL_PRJ/"."$prjListFn ] ; then
         echo -n " '$pkgLstFn' '$packageFn' " >> $showLst
         gotOne=1
      fi
   done
   #
   if [ "$gotOne" = "1" ] ; then
      echo -n " 'skip' '-----' " >> $showLst
   fi
   #
   # show all other matching package files
   for packageFn in `cat $pkgLst`; do
      prjListFn="`basename $packageFn`"
      echo -n " '$pkgLstFn' '$packageFn' " >> $showLst
   done
}

#
# int choose_files( changedFiles, selectedFiles, title )
#     Returns: 0 when user is done
#     Returns: 1 on 'ESC'
#
function choose_files()
{
   $decho "begin choose_files"
   #
   changedFiles=$1       # not written to
   selectedFiles=$2      # updated as per user selections
   title=$3
   #
   filesDone=0
   #
   # default to all selected
   #
   cp -f $changedFiles $selectedFiles
   #
   while [ "$filesDone" = "0" ] ; do
      #
      build_changed_list $changedFiles $selectedFiles .select.lst
      #
      show_files '"$title"' .select.lst 2> .result
      retVal=$?
      read selection < .result
      filesDefault=$selection   # set global default variable
      #
      case "$retVal" in
         1|255)                      # exit
            retStatus=1
            filesDone=1
           ;;
         2)                          # help
            sed -n /^######/,/^######/p $0 | sed 's/^#*//g' > pwl_update.README
            show_help pwl_update.README
           ;;
         0|3|4|5|6)                  # toggle project or operate on current
           #
           case "$selection" in
             "Add")
                retStatus=0
                filesDone=1
                ;;
             "Include")                  # operation "Include"
                cp -f $changedFiles $selectedFiles
                ;;
             "Exclude")
                echo -n "" > $selectedFiles
                ;;
             "Total"|"Skip"|"skip")
                xx=1 # do nothing
                ;;
             *)                      # list item selected
                if grep -q $selection $selectedFiles; then
                   grep -v $selection $selectedFiles > .tmp
                   cp -f .tmp $selectedFiles
                else
                   echo $selection >> $selectedFiles
                fi
                ;;
           esac       # end select item
           ;;
       esac    # end dialog response

   done    # end while configuring
   #
   $RM -f .tmp .result
   $decho "done choose_files"
   return $retStatus
}

#
# choose_package( listFile, fileInDuplicatePackages )
#    shows a list of packages that all contain the same file
#    user picks one or none
#
function choose_package()
{
   showLst=$1
   prjFn=$2
   #
   retVal=1
   selection=""
   while [ "$retVal" != "0" ] ; do

      show_files '"Select Package for: /$prjFn"' $showLst 2> .result
      retVal=$?
      read selection < .result
      if [ "$retVal" = "1" ] ; then
         return 1
      fi
      if [ "$selection" = "skip" ] ; then
         retVal=1
      fi
      grep "$selection:$prjFn" .index.list > .result
      if [ ! -s .result ] ; then
         retVal=1
      fi
   done
   return 0
}

#
# update_dir_excludes - build string of --exclude=fn for all files
#   not selected for comparision
#
function update_dir_excludes()
{
   exStr=""
   for rootFn in `cat .root.lst` ;
   do
      rootChk=${rootFn%%+*}   # handle filenames with '+' in them
      rootChk=${rootChk%%-*}  # handle filenames with '-' in them
      if [ "$(( $rootChk ))" != "1" ] ; then
         exStr="$exStr --exclude=$rootFn"
      fi
   done

}
function update_backup_restore()
{
   if [ ! -d $PWL_PRJ/backup ] ; then
      return
   fi
   # restore custom directory
   #
   if [ -d $PWL_PRJ/backup/$CUSTOM_DIR ] ; then
      rm -rf $PWL_PRJ/$CUSTOM_DIR
      mv $PWL_PRJ/backup/$CUSTOM_DIR $PWL_PRJ
   fi
   #
   # remove any new files created
   #
   rm -f $PWL_PRJ/*.*
   rm -f $PWL_PRJ/.*.list
   rm -f $PWL_PRJ/.project.*
   #
   # restore original list files
   #
   mv -f $PWL_PRJ/backup/*.* $PWL_PRJ        > /dev/null
   mv -f $PWL_PRJ/backup/.*.list $PWL_PRJ    > /dev/null
   mv -f $PWL_PRJ/backup/.project.* $PWL_PRJ > /dev/null
   #
   rm -rf $PWL_PRJ/backup
}

#
# update_backup - moves all configuration files to backup directory
#
function update_backup()
{
   $decho "start update_backup"
   #
   # backup existing project configuration
   #
   if [ -d $PWL_PRJ/backup ] ; then
      rm -rf $PWL_PRJ/backup
   fi
   mkdir $PWL_PRJ/backup
   #
   # copy custom files, they may be 'unselected' if they are found in
   #  a package, but can be reselected if still in custom directory
   #
   cp -a $PWL_PRJ/$CUSTOM_DIR $PWL_PRJ/backup
   echo -n "" >> $PWL_PRJ/backup/$CUSTOM_LST   #make sure we have a custom list file
   #
   # move all other files (not directories) to backup location
   #
   mv $PWL_PRJ/*.* $PWL_PRJ/backup
   mv $PWL_PRJ/.*.list $PWL_PRJ/backup
   #
   # restore project default file
   #
   cp $PWL_PRJ/backup/$DEFAULT_CFG $PWL_PRJ
   #
   $decho project moved to backup dir
   $decho "done update_backup"
}


#
# make_package_index - build 'indexes' for packages and project list files
#
function make_package_index()
{
   $decho "start make_package_index"
   retVal=0
   #
   # rebuild list index if not already built
   # TO DO: verify dates, rebuild if out of date
   #
   if [ -f .index.list ] && [ -f .indexfiles.list ] ; then
      xx=1  # do nothing
   else
      #
      # build list files
      #
      $decho "building list files"
      $PWL_LISTER > /dev/null
      #
      # build index database of packages
      #
      $decho "building index file"
      $PWL_LISTER --index .index.list
      #
      # build list of all files found in packages
      #
      cut -d":" -f2 .index.list | sort -u > .indexfiles.list
      #
   fi
   #
   # build comprehensive list of current project files,
   #    do not check for directories, too many matches!!!
   #
   if [ -f $CFG_FILE ] ; then
      echo -n "" > .tmp.lst
      for pkgListFn in `cat $CFG_FILE`; do
          grep -v "/$" $PWL_PRJ/`basename $pkgListFn` >> .tmp.lst
      done
      if [ -f $PWL_PRJ/$CUSTOM_LST ] ; then
         cat $PWL_PRJ/$CUSTOM_LST >> .tmp.lst
      fi
      sort -u .tmp.lst > .prjFiles.list
   else
      rm  -f .prjFiles.list # don't use old project list
      retVal=1
   fi
   #
   $RM -f .tmp.lst
   $decho "end make_package_index"
   #
   return $retVal
}


#=============================================================================
#
# update_package_selection( prjFn )
#     provides a choice of packages, with existing packages on top
#     Returns .result file with list of files
#
function update_package_select()
{
   # $decho "start update_package_select"
   #
   local prjFn=$1
   #
   rm -f .result
   pkgCnt="`grep -c $prjFn$ .index.list`"
   if [ "$pkgCnt" = "0" ] ; then
      return 1
   fi
   #
   # build list of all packages containing given file
   #
   grep "$prjFn$" .index.list | cut -f1 -d":" | sort -u > .tmp.lst
   if [ $pkgCnt = "1" ] ; then
      cat .tmp.lst | head -1 > .result
      return 0
   fi
   #
   # default if any package list configuration files exists
   #
   if [ "$udFnPr" != "1" ] ; then
      # no prompting, take first one that already exists and leave
      #
      for packageFn in `cat .tmp.lst`; do
         #
         prjListFn="`basename $packageFn`"
         if [ -f $PWL_PRJ/"."$prjListFn ] ; then
            echo $packageFn > .result
            return 0
         fi
      done
      # no prompting, none of the packages containing this file exist
      #     in current configuration, take first one and leave
      cat .tmp.lst | head -1 > .result
      return 0
   fi
   #
   # Build list of packages for dialog
   #
   build_packages .tmp.lst .show.lst
   #
   # operate dialog screen, select one or exit to select none
   #
   choose_package .show.lst $prjFn
   #
   # returns .result file
   #
   return 0
}

#
# update_remove_package_file( oldFile, fromPkg, msgFn )
#
#   Removes a configured file from the given package configuration
#
function update_remove_package_file()
{
   $decho "start update_remove_package_file"
$dmon
   local oldFn=$1
   local oldPkgPath=$2
   #
   local oldPkg=`basename $oldPkgPath`
   #
   # Remove old File from the Old package configuration
   #
   if [ ! -s $PWL_PRJ/.$oldPkg ] ; then
      if [ ! -s $PWL_PRJ/$oldPkg ] ; then
         echo "Could not find: $oldPkg to remove $oldFn from" >> $3
         return
      else
         cp $PWL_PRJ/$oldPkg $PWL_PRJ/.$oldPkg # create temp config file
      fi
   fi
   if [ -s $PWL_PRJ/.$oldPkg ] ; then
      #
      # remove it and update the temporary configuration file
      #
      $TEST_ONLY grep -v "$oldFn" $PWL_PRJ/.$oldPkg > .tmp
      $TEST_ONLY cp .tmp $PWL_PRJ/.$oldPkg
   fi
   #
   [ "$3" != "" ] && echo "Removed Packaged file: /$prjFn" >> $3
   #
   # $decho "end update_remove_package"
   return 0
}

#
# update_add_package( prjFilename, [updates file] )
#
function update_add_package()
{
   # $decho "start update_add_package"
   #
   local prjFn=$1
   #
   # project file exists in a package file(s), prompt to select
   #
   if update_package_select $prjFn ; then
      pkgInfo="`cat .result`"
   else
      [ "$2" != "" ] && echo "Could not find packaged file:/$prjFn" >> $2
      return 1     # no file found
   fi
   #
   pkgLstFn=${pkgInfo%%:*}
   pkgCfgFn="`basename $pkgLstFn`"
   #
   if [ "$TEST_ONLY" = "" ] ; then
      if [ ! -f $PWL_PRJ/.$pkgCfgFn ] ; then
         if [ -f $PWL_PRJ/$pkgCfgFn ] ; then
            cp -f $PWL_PRJ/$pkgCfgFn $PWL_PRJ/.$pkgCfgFn
         fi
      fi
      #
      # include package as one of the configured packages
      #
      echo $pkgLstFn >> $CFG_FILE_TMP
      #
      # include file as enabled in this package
      #
      echo $prjFn >> $PWL_PRJ/.$pkgCfgFn
   fi
   #
   [ "$2" != "" ] && echo "  Added Packaged file: /$prjFn  from $pkgCfgFn" >> $2
   #
   # $decho "end update_add_package"
   return 0
}

#
# update_remove_custom( oldFn msgFile)
#
function update_remove_custom()
{
   $decho "start update_remove_custom"
   #
   customFn=$1
   #
   local gotOne="1"  # default for testing only
   userMode="C"
   if [ "$TEST_ONLY" = "" ] ; then
      #
      # specify soure file and destination path
      #
      if $PWL_CUSTOM --delete $customFn ; then
         gotOne=1
      else
        [ "$2" != "" ] && echo "Custom file not found: /$customFn" >> $2
        gotOne=0
      fi
   fi
   #
   if [ "$2" != "" -a "$gotOne" = "1" ] ; then
      echo "  Deleted custom file: /$customFn" >> $2
   fi
   userMode="I"
   #
   $decho "done update_remove_custom"
}

#
# update_add_custom( newFn, mntPath, msgFile )
#     The given newFn (located at given mntPath) is added as a
#     custom file
#
function update_add_custom()
{
   # $decho "start update_add_custom"
   #
   local customFn=$1
   local mntPath=$2
   #
   # yes, add directories, other functions should remove them
   #   if they are not wanted.
   #
   #
   local gotOne="1"  # default for testing only
   userMode="C"
   if [ "$TEST_ONLY" = "" ] ; then
      #
      # specify soure file and destination path
      #
      if $PWL_CUSTOM --add $mntPath/$customFn "$customFn" ; then
         gotOne=1
      else
        [ "$3" != "" ] && echo "Custom file not found: /$customFn" >> $3
        gotOne=0
      fi
   fi
   #
   if [ "$3" != "" -a "$gotOne" = "1" ] ; then
      echo "Added new custom file: /$customFn" >> $3
   fi
   userMode="I"
   #
   # $decho "done update_add_custom"
}

#=============================================================================
#
# compare_ignore( changedFiles, results)
#     checks all the changed files to see if they are in a
#     directory which the user wants to ignore. If so, they
#     are removed from the final results list.
#     ChangedFiles must be listed as:
#            x filename
#     where the x is '<' or '>'
#
function compare_ignore()
{
   $decho "start compare_ignore"
   #
   changesLst=$1
   #
   cp $changesLst .tmp.lst
   cp $changesLst .tmp2.lst  #allows all root dirs to be selected
   #
   for rootFn in `cat .root.lst` ;
   do
      if [ "$(( $rootFn ))" != "1" ] ; then
         # not enabled, remove from changes
         grep -v "^. $rootFn" .tmp.lst > .tmp2.lst
         cp .tmp2.lst .tmp.lst
      fi
   done
   sort -u .tmp2.lst > $changesLst
   #
   $RM .tmp.lst .tmp2.lst
   #
   $decho "end compare_ignore"
}

#
# changed_by_dir - "diffs" the given directories, ignores
#             diff errors with non-existant and special files.
#
function changes_by_dir()
{
   $decho "start changes_by_dir"
   newMntName=$1
   tmpMntName=$2
   #
   # remove any files that indicate changes
   #
   rm -f .touched.lst .new.lst .removed.lst .tmp.lst .tmp2.lst
   #
   # change root to allow diff to work with links that point to "/"
   # diff the directories from the given mount point
   #
   /usr/sbin/chroot $baseprj diff -raNq $newMntName $tmpMntName > .tmp.lst 2>&1
   if [ ! -s .tmp.lst ] ; then
      $decho "changes_by_dir none"
      return
   fi
   #
   # handle diff errors:
   #   1. files that link to non-existant files
   #   2. character/fifo/block file types
   #   3. Only in mnt/xxx: filename (we remove Only, replace ": " with "/")
   #
   grep -v "No such file" .tmp.lst | grep -v "special file" | \
        grep -v "fifo" |sed "s/Only //g" | sed "s/: /\//g" > .tmp2.lst
   #
echo created .tmp2.lst with Only support
$dmon
   #
   if [ ! -s .tmp2.lst ] ; then
      $decho "changes_by_dir nothing significant"
      return
   fi
   #
   # generate list of changed files (remove mounted directory prefix)
   #   and create a prefix to support compare_ignore
   #
   cut -d" " -f2 .tmp2.lst | sed "s!$newMntName/!  !g"  > .changed.lst

echo just filenames
$dmon
   #
   # remove those files not selected by the user
   #
   compare_ignore .changed.lst
   if [ ! -s .changed.lst ] ; then
      $decho "changes_by_dir none selected"
      return
   fi
   #
   # Now record why each file changed:
   #   1. file was touched
   #   2. file was removed
   #   3. file was added
   #
   for newFn in `cat .changed.lst`; do
      #
      if [ ! -e $newMntName/$newFn ] ; then
         $decho "file to be removed: $newFn"
$dmon
         echo $newFn >> .removed.lst

      elif [ ! -e $tmpMntName/$newFn ] ; then
         $decho "file to be added: $newFn"
         echo $newFn >> .new.lst

      else
         $decho "files touched, to be added: $newFn"
         echo $newFn >> .touched.lst
      fi
   done
   #
   $RM -f .tmp.lst .tmp2.lst .changed.lst
   $decho "end changes_by_dir"
}

#=============================================================================
#
# changes_prompt( newMntPt, tmpMntPt, msgFile )
#     prompts user what to do with the changed files listed int
#     the .touched.lst, new.lst and .old.lst files
#
function changes_prompt()
{
   $decho "start changes_prompt"
   newMntName=$1
   tmpMntPt=$2
   #
   msgFn=$3
   #
   # show all touched files - add user selected files as custom files
   #
   if [ -s .touched.lst ] ; then
      choose_files .touched.lst .choosen.lst "Files Found that have Changed"
      if [ "$?" = "1" ] ; then
         return
      else
         #
         for newFn in `cat .choosen.lst`; do
           update_add_custom $newFn $newMntName $msgFn
         done
      fi
   fi
   #
   # show all new files found add these from package or as custom files
   #
   if [ -s .new.lst ] ; then
      #
      echo -n "" > .choosen.lst
      #
      if [ "$udPkg" = "1" ] ; then
         #
         # see if new file is in list of available packages
         #
         sort .new.lst .indexfiles.list | uniq -d > .pkgfiles.list
         #
         if [ -s .pkgfiles.list ] ; then
            choose_files .pkgfiles.list .choosen.lst "Found Packaged Files not in Configuration"
            #
            if [ "$?" = "1" ] ; then
               return
            elif [ -s .choosen.lst ] ; then
               for newFn in `cat .choosen.lst`; do
                  $decho adding $newFn
                  update_add_package $newFn $msgFn
               done
            fi
         fi
      fi
      #
      # add all new files not selected from packages as custom files
      #
      sort .choosen.lst .new.lst | uniq -u > .tmp.lst
      #
$dmon
      if [ -s .tmp.lst ] ; then
         choose_files .tmp.lst .choosen.lst "Files Found not in Configuration"
         if [ "$?" = "1" ] ; then
            return
         else
            for newFn in `cat .choosen.lst`; do
               update_add_custom $newFn $newMntName $msgFn
            done
         fi
      fi
   fi
   #
   # show all old files found - remove from configuration
   #
   if [ -s .removed.lst ] ; then
      choose_files .removed.lst .choosen.lst "Configured files not found"
      if [ "$?" = "1" ] ; then
         return
      else
         # removed file may be custom or packaged file
         #
         for oldFn in `cat .choosen.lst`; do
            if update_package_select `basename $oldFn` ; then
               read fromPkg < .result
               $decho "remove package file $oldFn from $fromPkg"
$dmon
               update_remove_package_file $oldFn $fromPkg  $msgFn
            else
               $decho "remove custom file $oldFn"
               update_remove_custom $oldFn $msgFn
            fi
         done
      fi
   fi
   $RM -f .touched.lst .new.lst .removed.lst .choosen.lst
   $decho "end changes_prompt"
}


#
# update_changes ( newMntName, tmpMntPoint  )
#   given a list of files that differ from the extracted configuration
#   and the "given" file list (mounted device, directory or file list)
#   checks each file to see if it needs to be added to the configuration.
#
function update_changes()
{
   $decho "start update_changes"
   newMntName=$1
   tmpMntPt=$2
   #
   # check to see if changes exists, verify each changed file
   #
   echo -n "" > .updates.msg
   #
   # find the files and anounce differences to user (custom or package)
   #
   changes_prompt $newMntName $tmpMntPt .updates.msg
   #
   # if no changes exists or the filesystem differences don't affect
   # the configuration then announce and leave
   #
   if [ ! -s .updates.msg ] ; then
      $decho "no changes made"
      usrMode="I"
      case "$fsType" in
         FS_DEV) srcFs="on $deviceName at $updateMnt"
         ;;
         FS_DIR) srcFs="at directory $updateMnt"
         ;;
         FS_LIST) srcFs="listed in $newFileLst"
         ;;
      esac
      show_message "Update Configuration Done" \
             "Configuration for project \"$CFG_BASE\" matches files $srcFs"
      return
   fi
   #
   # Save these changes (if updates enabled)
   #
   if [ "$TEST_ONLY" = "" ] ; then
      show_results .updates.msg "Updated Configuration Results"
      confirm_save
   else
      show_results .updates.msg "Configuration Differences (No Changes Made!)"
   fi
   $RM -f .updates.msg
   $decho "update_changes"
}

#=============================================================================
#
# cmd_update_configuration
#    allows project configuration files
#    to be updated from an existing file system
#
function cmd_update_configuration()
{
   $decho "start cmd_update_configuration"
   #
   #  extract old/current configuration into temporary directory
   #  (not from the temporary configuration files - make sure user is ready)
   #
   confirm_save
   #
   # now build indexes, incase any temporary files were saved
   #
   make_package_index
   #
   #  extract the project configuration if any project files are newer
   #    than "temp mount pt" directory
   #
   tmpMntPt="$PWL_PRJ/mnt_tmp/$PRJ_MNT"
   newestFn="`ls -rat $PWL_PRJ | grep -v "^\." | tail -1`"
   #
   if [ "$newestFn" != "mnt_tmp" ] ; then
      #
      if [ -d $tmpMntPt ] ; then
         rm -rf $tmpMntPt
      fi
      mkdir -p $tmpMntPt
      #
      oldDBG=$debugMode
      usrMode="C"
      $decho "Extracting all configured files"
      (. ./pwlconfig -e $tmpMntPt)
      sync                # wait for tar
      usrMode="I"
      debug_mode $oldDBG
   fi
   #
   # find files that have changed, check dates if enabled
   #
   if [ "$fsType" = "FS_LIST" ] ; then
      #
      updateMnt=$tmpMntPt
      changes_from_list $tmpMntPt $newFileLst
      #
   else
      changes_by_dir  $updateMnt $tmpMntPt
   fi
$dmon
   #
   # do something with the files that are different,
   #
   update_changes $updateMnt $tmpMntPt
   #
   $RM .tmpxtract.lst
   #
   $decho "end cmd_update_configuration"
}

#
# converts current project configuration to use all packaged files
#
function cmd_update_from_packages()
{
   $decho "start cmd_update_from_packages"
   #
   usrMode="C"
   confirm_save     #force project to be saved anyhow, deletes all .tmp files
   usrMode="I"
   #
   # now build indexes, incase any temporary files were saved
   #
   make_package_index
   if [ ! -s .prjFiles.list ] ; then
      show_message "Project Configuration Not Found"\
                   "The project could not be updated, no configuration files were found."
      return
   fi
   #
   update_backup      #remove all existing config files!!
   #
   # find each project file from the package files
   #
   tmpMsg="$PWL_PRJ/.Convert.msg"
   #
   for prjFn in `cat .prjFiles.list` ; do
      echo -n "."
      #
      # give priority to package files - previous custom file may
      #     be packaged. Of course, custom file may be unique for
      #     this project...user must re-select custom files
      #
      if  update_add_package $prjFn $tmpMsg ; then
         #
         # project file found in a package
         #
         :
      elif grep -q "$prjFn" $PWL_PRJ/backup/$CUSTOM_LST ; then
         #
         # new file was previously a custom file
         #
         update_add_custom $prjFn $PWL_PRJ/backup/$CUSTOM_DIR $tmpMsg
      #
      else
         # $decho "Project configuration was file not in current packages"
         echo "Project file not found $prjFn" >> $tmpMsg
      fi
   done
   #
   # sort and show results for files not found or added
   #
   usrMode="I"
   sort -u $tmpMsg > $PWL_PRJ/Convert.msg
   if [ "$TEST_ONLY" = ":" ]; then
      show_results $PWL_PRJ/Convert.msg "Update Configuration Results (No Changes Made!)"
      update_backup_restore
   else
      show_results $PWL_PRJ/Convert.msg "Update Configuration Results"
      confirm_save
   fi
   #
   # save configuration (allow restore to previous configuration ?)
   #
}

# ###########
# ##########  OLD STUFF ??
# ##########
#
# cmd_update_verify( mntName, diffFn )
#     Checks the different file, diffFn with custom source file or
#     tarred source file. diffFn IS NOT prefixed with leading "/"
#     (since tar list files don't have this either)
#
function cmd_update_verify()
{
   $decho "start cmd_update_verify"
   mntName="$1"
   diffFn="$2"
   msgFn="$3"
   #
   # locate diffFile in the configuration list files
   #
   if [ "$diffFn" = "" ] ; then
      $decho "No update file specified"
      return
   fi
   #
   # check for entire filename at end of line of all configuration files
   # **files could appear three or more times in a configuration!
   #   Originally from a package, duplicated in another package or
   #   then tweaked and added as a custom file. Highest priority goes to
   #   custom file, then to package files.
   #
   # if NOT in package configuration or custom list files
   #
   gotOne=0
   if ! grep -q "$diffFn$" .prjFiles.list ; then
      #
      $decho "Changed File $diffFn not in project list files"
      #  Different file not part of project configuration
      #   - Check for new file as part of existing package
      #     or add as a new custom file
      #
      if [ "$udPkg" = "1" ] ; then
         #
         # if this file exists as a packaged file, use that one
         #
         if update_add_package $diffFn $msgFn ; then
            $decho "new file $diffFn is from existing package"
            gotOne=1
         fi
      fi  # end package check requested
   #
   #  could be a custom file
   #
   elif [ -s $PWL_PRJ/$CUSTOM_LST ] && grep -q "$diffFn$" $PWL_PRJ/$CUSTOM_LST ; then
      #
      $decho "Changed file $diffFn is currently a custom file"
      #
      # custom file was touched
      #
      if update_prompt CUSTOM_NEWER $diffFn  ; then
         echo "Newer custom file updated: /$diffFn" >> $msgFn
         $TEST_ONLY $PWL_CUSTOM --refresh $mntName$diffFn "$diffFn"
      fi
      gotOne=1
   fi
   #
   # otherwise add as completely new custom file
   #  (without link to custom source)
   #
   if [ "$gotOne" = "0" ] ; then
      if update_prompt NEW $1 ; then
         update_add_custom $diffFn $mntName $msgFn
      fi
   fi
   #
   $decho "end cmd_update_verify"
}

# changes_type
#    the given file lists differences between two systems
#    <"new file"      new or different than old file
#    >"old file"      not found on new FS or different than new file
function changes_type()
{
  #
  # seperate list of changes
  #  get touched files - duplicate items were files that changed
  #
  cut -f2- -d" " $chLst | uniq -d   > .touched.lst
  #
  grep "^<" $chLst | cut -f2- -d" " > .new.lst
  #
  grep "^>" $chLst | cut -f2- -d" " > .removed.lst
}

#
# format ls_file - reformats an ls -lR file into:
#    filename size
#
function format_ls_file()
{
   $decho "start format_ls_file"
   #
   # parse line and rebuild to new format
   #
   gawk -F" " '{
      if ($1 ~ ":$" ) {             # found directory names ends in ":"
         split($1, curDir,":");     #  remove ":"
      }
      else                          # re-format
         if ( NF == 9 )              #  note: Device nodes ignored!
            printf("%s/%s %s %s %s %s\n", curDir[1],  $9, $5, $6, $7, $8 );
      }' $1 > .tmp.lst
   #
   # remove any leading "." characters and
   #
   if [ "$2" != "" ] ; then
      # remove base directory
      #
      sed "s/^\.//g" .tmp.lst | sed "s!$2!!g"    | sort -u > .tmp2.lst

   else
      # -or - add leading slash
      #
      sed "s/^\.\///g" .tmp.lst | sed "s/.*/\/&/g" | sort -u > .tmp2.lst
   fi
   #
   # if not comparing time stamps, remove time data
   #
   if [ "$udTime" = "1" ] ; then
      cp .tmp2.lst $1
   else
      cut -f1,2 -d" " .tmp2.lst > $1
   fi
   #
   $RM -f .tmp2.lst .tmp.lst
   $decho "end format_ls_file"
}

#
# compare_ls( oldFn, newFn, result file )
#    - compares two directory listing files (based from same dir!)
#      returns new file .cmp.lst
#
function compare_ls()
{
   $decho "start compare_ls"
   local oldFn=$1
   local newFn=$2
   local cmpResultsFn=$3
   #
   # compare directory listings to determine files that differ
   #   (remove date / timestamp if any, after the compare)
   #
   diff $newFn $oldFn |  cut -f1-2 -d" " | grep "\/" | sort -u > .datechg.fs
   #
   # ignore directories not selected
   #
   compare_ignore .datechg.fs $cmpResultsFn
   #
   #
   $decho "end compare_ls"
}

#
# changes_by_file(newMntName, tmpMntName, w_Date )
#      creates a list of files (.changes.fs) that have changed
#      based on comparing each filename (optionally, check file date)
#
# returns: .changes.fs
#
function changes_by_file()
{
   $decho "start changes_by_file"
   newMntName=$1
   tmpMntName=$2
   if [ "$3" != "" ] ; then # compare with dates
      findFmt='%p %t\n'     # may be a pain if extracted dates
                            # differ from file dates
   else
      findFmt='%p\n'        # else just compare file names
                            # (may miss some changes i.e a file
                            # with 1 byte changed from A to B
   fi
   #
   # capture directory listing of given file system (the NEW one)
   #
   loc=`echo $PWD`
   cd $newMntName
   find * -printf "$findFmt" 2> $loc/.err | sort -u > $loc/.new.fs
   cd $loc
   #
   # capture directory listing of our temporary file system (the OLD one)
   #
   cd $tmpMntName
   find * -printf "$findFmt" 2> $loc/.err | sort -u > $loc/.old.fs
   cd $loc
   #
   # now do the compare
   #
   compare_ls .old.fs .new.fs .changes.fs
   #
   $RM .new.fs .old.fs
   $decho "end changes_by_file"
}

#
# changes_from_list( newMntName, fileList )
#  - creates .changes.fs file by comparing existing
#   configuration and given list file
#
function changes_from_list()
{
   $decho "start changes_from_list"
   #
   tmpMntName="$1"
   cp $2 .new.fs
   #
   # list files for "old" (just extracted) file system
   #
   loc=`echo $PWD`
   cd $tmpMntName
   find * -type f -printf "$findFmt" 2> $loc/.err | sort -u > $loc/.old.fs
   cd $loc
   #
   # modify ls directory listings into "%p %s %t" format, remove
   #  base directory if required
   #
   format_ls_file .old.fs
   #
   compare_ls .old.fs .new.fs .changes.fs
   #
   $RM -f .old.fs .cmp.lst .new.fs
   $decho "end changes_from_list"
}
# ###########
# ###########  OLD STUFF!!!
# ###########
