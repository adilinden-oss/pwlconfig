#! /bin/bash
#
###
# Usage: pwl_custom  cmd  [srcDirFn [ custDirFn ]]
#
#       Performs maintenance on Pee Wee Linux custom configuration
#       files using. Works from command line or interactively.
#
#   "cmd"     "parameters"     Results
#   --source  source, dest   specify an original source file and add it
#   --add     source, dest   add a copy of source file
#   --delete  source         remove a file from the custom configuration
#   --extract destMountPt    extract all custom files to given mount point
#   --toggle  source         include or exclude source from custom configuration
#   --update                 verify files against custom sources
#   --save                   save temporary custom configuration
#   --init                   verify custom files are initialized
#   --help                   this help screen
#   --project project name   use this project (default is last project)
#
# Notes:
#
#   "source" and "dest" can be files or directories
###
#
# History see CHANGES.pwlconfig
#
# Comments
#   The custom configuration contains a list of files stored in the
#   project "custom" directory.  These files are seperate from packaged
#   files and overwrite any package files of the same name.
#   The following global variables must be set in external envrionment
#
#     PWL_PRJ - assigned name of the project to work with
#     usrMode   - set to "I" for interactive mode (uses dialogs)
#     when usrMode is "I", globals required are:
#     DIALOG    - set to name of dialog program
#     backtitle - set to program name and version
#
######
#pwl_custom.README
#
# Custom files are added to your file system to support your unique
# hardware or environment.
#
# For example, if you have a network device that must be included as
# a module, just "Add" the device driver module file to your Custom Files.
#
# When you add a custom file, you specify a source and destination.
# If the source file gets updated, you will be prompted to upgrade
# the destination file in your project.
#
# If the source file gets deleted, you still have a copy of it in
# your project.
#
#    Shortcut:  Press 'Esc' at any prompt to return to the
#               "Configure Custom Files menu with no changes"
#
#    Shortcut:  You can enter a directory name and every file
#               in that directory will be added as a custom file
#
#    Shortcut:  Use pwl_custom --help to see command line options
#               that let you modify your custom files programatically.
#
# "Add custom files to ..."
#
#    First you will be prompted to specify the "entire" path and name
#    of the custom file to add to your file system:
#
#       /home/joe_user/network/br549.o
#
#    If this 'source' file is found, you will be prompted to specify
#    the 'destination' file. Again, enter the "entire" path and name of
#    the final location for the file (where it will appear in the final
#    file system).  This path must start with '/', the root of the file
#    system being built:
#
#       /lib/modules/2.2-12-20/net/br549-v3.o
#
#    If this file alread exists in your project you will be prompted
#    to overwrite it.  If you overwrite it, the source will be the new
#    source path and name you just entered.
#
# "Delete custom files from ..."
#
#    If you no longer need a custom file, you can delete it from your
#    project.  Enter the name of the file you want to delete as it
#    appears in your project:
#
#       /lib/modules/2.2.12-20/net/br549-v3.o
#
#    You will be prompted if you really really want to delete this.
#
#    If you specify a directory, that directory and all files contained
#    within it will be deleted.
#
#    Deleting a custom file will not touch the source file.
#
#    Shortcut:  If you 'select' a custom file from the menu, then
#               choose 'Delete',the custom file name is displayed
#               by default, saving you all that typing.
#
#
# "Include all custom files"
# "Exclude all custom files"
#
#     Select these menu items to globally enable or disable all
#     custom files added to your project.
#
#     Once included or excluded, you can toggle each individual
#     file to further optimize your file system configuration.
#
#END
######
#=============================================================================
#
# include generally handy functions
#
if [ -f "./scripts/pwl_functions" ] ; then
  . ./scripts/pwl_functions
elif [ -f "./pwl_functions" ] ; then
  . ./pwl_functions
else
  echo "script pwl_functions not found"
fi
#
PWL_CUSTOM_VER=${PWL_REL_VER}".2"
#
# record path for custom directory
#
pushd "$PWD/$PWL_PRJ/$CUSTOM_DIR" 2> /dev/null > /dev/null
PATH_CUSTOM=$PWD
popd 2>/dev/null > /dev/null
#
#=============================================================================
#
#  build_custom( list_fn, refDir )
#   - display a menu of custom file operations and all custom files 
#     included in the project
#
function build_custom ()
{
   $decho "start build_custom"
   #
   local customLst="$1"
   local refDir="$2"
   #
   # always insert Add  operation in menu
   #
   echo -n " 'Define' 'Add custom files to \"$CFG_BASE\" -->'  " > $1
   #
   # list all custom files currently found in custom directory
   #
   if [ ! -d "$PWL_PRJ/$CUSTOM_DIR" ] ; then   # user deleted all custom files
      return
   fi
   dir_tree_list_all "$refDir" .result  "-maxdepth 1"
   #
   if [ ! -s .result ] && [ ! -s "$PWL_PRJ/$CUSTOM_LST" ]; then
      # no custom files found
      return
   fi
   #
   # custom files found, insert operations
   #
   echo -n " 'Delete' 'Delete custom files from \"$CFG_BASE\" -->' " >> $1
   echo -n " 'Reload' 'Reload custom files from source'         " >> $1
   echo -n " 'Rebuild' 'Rebuild source files from this project' " >> $1
   echo -n " 'Skip'   '----' " >> $1
   echo -n " 'Add'    'Include all custom files' " >> $1
   echo -n " 'Remove' 'Exclude all custom files' " >> $1
   #
   if [ "$refDir" != "$PATH_CUSTOM" ] ; then  
      # allow to traverse backwards upto root of custom path
      echo -n " '..' '..' " >> $1
   fi
   #
   #  show all files listed, flag'em if they are on the list
   #
   local totalSz=0
   for customFn in $(cat .result); do
      #
      echo -n "."   # show user we are doing something
      if [ ! -z "$customFn" ] ; then
         #
         # don't show or add directory size
         #
         if [ ! -d "$refDir/$customFn" ] ; then
            fileSz=`du -bs "$refDir/$customFn" | cut -f1`
         else
            fileSz=0
         fi
         #
         # flag 'em if we got 'em - must be exact End Of Line match
         #
         if grep -q "$customFn$" "$PWL_PRJ/.$CUSTOM_LST" ; then
            echo -n " '$customFn' '[*] $customFn " >> $1
            totalSz=`expr $totalSz + $fileSz`
         else
            echo -n " '$customFn' '[ ] $customFn" >> $1
         fi
         #
         # show size if not zero
         #
         if [ $fileSz -gt 0 ] ; then
            echo -n "  $fileSz" >> $1
         fi
         echo -n "' " >> $1
      fi
      #
   done
   #
   echo -n " 'Total' 'Estimated total bytes for selected files: $totalSz' " >> $1

   $decho "end build_custom"
}

#=============================================================================
#
# custom_source( srcDirFn, custDirFn )
#
function custom_source()
{
      $decho "start custom_source $1 $2"
      #
      # record Source file for updates later
      #
      local srcDirFn="$1"
      local custDirFn="$2"
      local srcFn=""
      #
      if [ "$srcDirFn" = "" ] || [ "$custDirFn" = "" ] ; then
         usage "Invalid parameters: $*"
      fi
      #
      # make a record or original source destinations specified
      #
      echo "# $srcDirFn=$custDirFn" >> $PWL_PRJ/$CUSTOM_SRC
      # 
      if [ -d "$srcDirFn" ] ; then
         #
         # user directory specified, list all files
         #
         dir_tree_list_all "$srcDirFn" .result
         #
         for srcFn in `cat .result` ; do
            echo "$srcDirFn/$srcFn"="$custDirFn/$srcFn" >> "$PWL_PRJ"/"$CUSTOM_SRC"
         done
      #
      else
         #  only one file specified
         #
         $decho "Creating Custom source spec for custom file source $srcDirFn"
         echo "$srcDirFn"="$custDirFn"  >> "$PWL_PRJ"/"$CUSTOM_SRC"
      fi
      #
      # make sure we only have one of each source
      #
      sort -u $PWL_PRJ/$CUSTOM_SRC | sed "s!//!/!g" > .result
      cp .result $PWL_PRJ/$CUSTOM_SRC
      $decho "end custom_source"
}

#
# custom_add( srcDirFn, custDirFn )
#      copy the given source file (or directory) to the custom configuration
#      directory
#
function custom_add()
{
      $decho "start custom_add $1 $2" 
      local srcDirFn="$1"
      local custDirFn="$2"
      #
      if [ "$srcDirFn" = "" ] || [ "$custDirFn" = "" ] ; then
         usage "Invalid parameters: $*"
      fi
      if [ ! -e "$srcDirFn" ] ; then
         if [ ! -L "$srcDirFn" ] ; then
            $decho "Ignoring source file not found: $srcDirFn"
            $dmon
            return 1 
         fi
      fi
      #
      # copy source file or directory to custom directory
      #
      if [ -d "$srcDirFn" ] ; then
         #
         # make sure destination directory exists
         #
         if [ ! -d "$PWL_PRJ"/"$CUSTOM_DIR"/"$custDirFn" ] ; then
            mkdir -p "$PWL_PRJ"/"$CUSTOM_DIR"/"$custDirFn"
         fi
         #
         # copy entire source directory to our custom directory
         #
         $decho "Adding custom directory $custDirFn"
         cp -rfax "$srcDirFn"/* $PWL_PRJ/$CUSTOM_DIR/"$custDirFn"
      elif [ -L "$srcDirFn" ] ; then
         #
         $decho "Adding custom link file $custDirFn"
         custDir=$PWL_PRJ/$CUSTOM_DIR/`dirname "$custDirFn"`
         if [ ! -d  "$custDir" ] ; then
            mkdir -p "$custDir"
         fi
         cp -ax "$srcDirFn" $PWL_PRJ/$CUSTOM_DIR/"$custDirFn"
         # 
      else
         #
         # make sure destination directory exists
         #
         if [ ! -d "$PWL_PRJ"/"$CUSTOM_DIR"/`dirname "$custDirFn"` ] ; then
            mkdir -p "$PWL_PRJ"/"$CUSTOM_DIR"/`dirname "$custDirFn"`
         fi
         #
         # copy source file to our custom file
         #
         $decho "Adding custom file $custDirFn"
         cp -fax "$srcDirFn" $PWL_PRJ/$CUSTOM_DIR/"$custDirFn"
      fi
      #
      # make sure custom configuration files exist
      #
      if [ ! -f $PWL_PRJ/.$CUSTOM_LST ] ; then
         if [ ! -f $PWL_PRJ/$CUSTOM_LST ] ; then
            echo -n "" > $PWL_PRJ/$CUSTOM_LST
         fi
         cp $PWL_PRJ/$CUSTOM_LST $PWL_PRJ/.$CUSTOM_LST
      fi
      #
      # add single file name, or list of files if we added a directory
      #
      if [ -d "$PWL_PRJ/$CUSTOM_DIR/$custDirFn" ] ; then
         dir_tree_list_all "$PWL_PRJ/$CUSTOM_DIR/$custDirFn" .result
         for fn in `cat .result` ; do
            echo "${custDirFn##/}"/"$fn" >> $PWL_PRJ/.$CUSTOM_LST
         done
      else
         echo "${custDirFn##/}" >> $PWL_PRJ/.$CUSTOM_LST
      fi
      # sort for nice display, and to only list once
      #
      cat $PWL_PRJ/.$CUSTOM_LST | sed "s!^/!!g" | sort -u > .result
      cp .result $PWL_PRJ/.$CUSTOM_LST
      #
      $decho "end custom_add"
      #
      return 0
}

#
# custom_delete( srcname [ files_only ] )
#   deletes the specified "srcname" from the custom directory.
#   If filesOnly is not specified, then the source reference is removed also.
#   This is not undoable and not a temporary thingy either.
#
function custom_delete()
{
      $decho "custom_delete: $1"
      #
      # Delete single file or directory
      #
      local srcName="$1"
      local filesOnly=$2
      #
      $decho "Deleting custom file $srcName"
      rm -rf "$PWL_PRJ"/"$CUSTOM_DIR"/$srcName
      #
      if [ "$filesOnly" = "" ] ; then
         #
         # remove from custom source listing and enabled listings
         #
         $decho "removing source reference"
         grep -v $srcName "$PWL_PRJ"/"$CUSTOM_SRC"  > .result
         cp .result "$PWL_PRJ"/"$CUSTOM_SRC"
         #
         $decho "removing temp reference"
         grep -v $srcName "$PWL_PRJ"/."$CUSTOM_LST" > .result
         cp .result "$PWL_PRJ"/."$CUSTOM_LST"
         #
         $decho "removing current reference"
         grep -v $srcName "$PWL_PRJ"/"$CUSTOM_LST"  > .result
         cp .result "$PWL_PRJ"/"$CUSTOM_LST"
      fi
      #
      $decho "done"
}

#
# custom_extract( mount point )
#
function custom_extract()
{
   $decho "start custom_extract"
      #
      # Extract custom files to file system
      #
      local destMnt=$1 
      #
      if [ "$destMnt" = "" ] ; then
         usage "Invalid parameters: $*"
      fi
      local fileCount=0
      #
      $decho "Extracting custom files to $destMnt"
      #
      # try this...just copy the contents of .../custom
      # - users aren't supposed to add/remove files manually
      # - delete removes files no longer wanted
      # thus, the custom directory is the image to be copied!
      #
      cp -rfaxv $PWL_PRJ/$CUSTOM_DIR/* $destMnt
      #
      # count the number of files just for kicks
      #
      fileCount=`du $PWL_PRJ/$CUSTOM_DIR -a | wc -l | gawk '{print$1}'`

   return $fileCount
}

#
# custom_toggle( fileName )
#
function custom_toggle()
{
      $decho "start custom_toggle $*"
      #
      # Toggle custom file from the configuration
      #
      local selection=$1
      if [ "$selection" = "" ] ; then
         usage "Invalid parameters: $*"
      fi
      #
      custTmp="$PWL_PRJ"/."$CUSTOM_LST"
      selTmp=`basename "$selection"`
      #
      # toggle selection - use exact match
      #
      if grep -q "$selTmp$" "$custTmp" ; then
         #
         #  selection found - remove file (or directory) from the list file
         #
         grep -v "$selTmp$" "$custTmp" > .result
         cp .result "$custTmp"
         $decho "Excluded custom file (or directory): $selTmp"
      #
      else
         #  selection not found - re-build the list, and add
         #      all that match (allows directory adds )
         #
         dir_tree_list_all "$PWL_PRJ/$CUSTOM_DIR" .result
         grep "$selTmp$" .result >> $custTmp
         $decho "Included custom file (or directory): $selTmp"
      fi
      #
}

#
#  copy_custom_to_src  file_list_file
#
function copy_custom_to_src()
{
   $decho "start copy_custom_to_src"
   #
   fileLst="$1"
   for newFn in `cat $fileLst` ; do 
      custBase=`basename $newFn`
      srcDestFn=`grep $custBase  $PWL_PRJ/$CUSTOM_SRC`
      destFn=${srcDestFn##*=}
      srcFn=${srcDestFn%%=*}
      #
      # seperate source path and name and copy back to source
      #
      $decho "copy: $destFn to src: $srcFn"
      $dmon
      #
      cp -fax  $PWL_PRJ/$CUSTOM_DIR/$destFn $srcFn
   done
}

#
#  copy_src_to_custom  file_list_file
#
function copy_src_to_custom()
{
   $decho "start copy_src_to_custom"
   #
   fileLst="$1"
   for newFn in `cat $fileLst` ; do 
      srcBase=`basename $newFn`
      srcDestFn=`grep $srcBase  $PWL_PRJ/$CUSTOM_SRC`
      destFn=${srcDestFn##*=}
      srcFn=${srcDestFn%%=*}
      #
      # seperate source path and name and copy back to source
      #
      $decho "copy: $srcFn to src: $destFn"
      $dmon
      #
      cp -fax  $srcFn $PWL_PRJ/$CUSTOM_DIR/$destFn
   done
   #
   $decho "finish copy_src_to_custom"
}

#
# custom_update - prompts to update if custom or source is newer
#
function custom_update()
{
   $decho "start custom_update $*"
   # 
   if [ ! -f "$PWL_PRJ"/"$CUSTOM_SRC" ] ; then
      $decho "end custom_update (no sources specified)"
      return
   fi
   #
   # build a dialog of changes by file
   #
   echo -n "" > .update.nosrc
   echo -n "" > .update.nocustom
   echo -n "" > .update.oldcustom
   echo -n "" > .update.oldsrc
   #
   for srcDestFn in `(cat "$PWL_PRJ"/"$CUSTOM_SRC" | grep -v "^#" )`; do
      $decho -n "."
      #
      # seperate source and destination names
      #
      destFn=${srcDestFn##*=}
      srcFn=${srcDestFn%%=*}
      srcDir=`dirname $srcFn`
      # $decho checking $srcDir for file $srcFn 
      #
      # Check source files, prompt if not found
      #
      if [ ! -d $srcDir ] ; then
         # 
         $decho "Custom Source directory not found"
         # 
         echo "$srcFn" >> .update.nosrc

      elif [ -d "$srcFn" ] ; then
         xx=1   #ignore directories for purposes of date compares 
                # user could put new files in sources directories, without
                # adding to project
         $decho "Ignoring directory custom source: $srcFn"
      #
      elif [ -L "$srcFn" ] ; then
         xx=1   # don't flag links as errors
         $decho "Ignoring Link custom source file: $srcFn"

      elif [ ! -e "$srcFn" ] ; then
         #
         $decho "Custom Source not found $srcFn"
         #
         echo "$srcFn" >> .update.nosrc
      #
      #  Check destination files
      #
      elif [ ! -e "$PWL_PRJ"/"$CUSTOM_DIR"/"$destFn" ] ; then
         #
         $decho "Custom file not found in project: $srcFn"
         #
         echo "$srcFn" >> .update.nocustom
      #
      # compare the dates of the original source and existing custom file
      #
      elif  [ "$srcFn" -nt "$PWL_PRJ"/"$CUSTOM_DIR"/"$destFn" ] ; then
            #
            $decho "Custom file out of date: $srcFn"
            #
            echo "$srcFn" >> .update.oldcustom
      #
      elif [ "$PWL_PRJ"/"$CUSTOM_DIR"/"$destFn" -nt "$srcFn" ] ; then
            #
            $decho "Custom source file is out of date: $srcFn" 
            #
            echo "$srcFn" >> .update.oldsrc
      fi
      #
   done
   #
   # prompt to allow overwritting of old or non-existant files
   #
   rm -f .update.select
   if [ -s .update.oldsrc ] ; then
      choose_files .update.oldsrc .update.select "Update Configuration"\
                   "Update selected source files from custom files"
      if [ "$?" = "0" -a -s .update.select ] ; then
         copy_custom_to_src .update.select
      fi
   fi
   #
   rm -f .update.select
   if [ -s .update.oldcustom ] ; then
      choose_files .update.oldcustom .update.select "Update Configuration"\
                    "Update selected custom files from source files"
      if [ "$?" = "0" -a -s .update.select ] ; then
         copy_src_to_custom .update.select
      fi
   fi
   #
   rm -f .update.select
   if [ -s .update.nosrc ] ; then
      choose_files .update.nosrc .update.select "Update Configuration"\
                     "Reload source files from custom files"
      if [ "$?" = "0" -a -s .update.select ] ; then
         copy_custom_to_src .update.select
      fi
   fi
   #
   rm -f .update.select
   if [ -s .update.nocustom ] ; then
      choose_files .update.nocustom .update.select "Update Configuration"\
                     "Reload custom files from source files"
      if [ "$?" = "0" -a -s .update.select ] ; then
         copy_src_to_custom .update.select
      fi
   fi
   #
   $RM .update.select
   $RM .update.nosrc .update.nocustom .update.oldcustom .update.oldsrc
   #
   $decho "end custom_update"
}

#=============================================================================
#
# custom_refresh( mntName, chkFn )
#    compare custom files with file at mount point
#
function custom_refresh()
{
   $decho "start custom_refresh"
   local mntName=$1
   local chkFn=$2
   #
   # verify parameters
   #
   if [ "$mntName" = "" ] || [ "$chkFn" = "" ] ; then
      $decho "custom compare no files given"
      return
   fi
   if [ ! -e "$mntName" ] || [ ! -e "$PWL_PRJ/$CUSTOM_DIR/$chkFn" ] ; then
      $decho "custom compare files not found"
      return
   fi
   #
   # Show user the information about both files for an informed decision
   #
   destInfo="`find $PWL_PRJ/$CUSTOM_DIR/$chkFn -printf "%s   %t   %p     "`"

   srcInfo="`find $mntName -printf "%s   %t   %p     "`"
   #
   # compare dates of files to see if original is newer
   #
   if [ "$PWL_PRJ/$CUSTOM_DIR/$chkFn" -nt "$mntName" ] ; then
      #
      # The orginal custom file is newer than project custom file
      #
      #
      show_confirm "Replace Custom file: $chkFn ?" \
          "Replace Mounted File: $srcInfo ............. With Newer Custom file: $destInfo ?" \
          10

      if [ "$?" = "0" ] ; then  # yes, replace it
         #
         # User confirmed, refresh the file
         cp -fa $PWL_PRJ/$CUSTOM_DIR/$chkFn $mntName
         #
      fi
   elif [ $mntName -nt "$PWL_PRJ/$CUSTOM_DIR/$chkFn" ] ; then
      #
      # the mounted file system file is newer than the custom file
      #
      show_confirm "Replace Custom file: $chkFn ? " \
          "Replace Old Custom File: $destInfo ........... With Newer file: $srcInfo ?" \
          10
      if [ "$?" = "0" ] ; then
         # User confirmed, replace file
         custom_add $mntName $chkFn
      fi
   else
      $decho "Custom Files same date"
      echo -n "c"
   fi
   $decho "done custom_refresh"
}

#
#  custom_remove
#
function custom_remove ()
{
   $decho "start custom_remove"
   #
   # prompt
   #
   gotOne=0
   while [ $gotOne = "0" ]
   do
      get_string "Delete Custom File(s)" \
              "Enter path and name of custom file or directory:" \
              "srcName" $1
      if [ $? != "0" ] ; then
         return 0
      fi
      #
      if [ -z "$srcName" ] ; then
         return 0
      fi
      if [ ! -e "$PWL_PRJ"/"$CUSTOM_DIR"/$srcName ] ; then
         show_message "File Not Found" " Check path and name and guess again"
      else
         gotOne=1
      fi
   done
   #
   # confirm remove
   #
   show_confirm "Removing Custom File(s) ! CAN NOT BE UNDONE ! "\
                   "Really remove Custom file(s) $srcName from project ?"

   if [ $? = "0" ] ; then
      #
      # kill'em, kill'em all - kill kIll KILL
      #
      custom_delete $srcName

   fi
   $decho "end custom_remove"
}

#
# custom_rebuild - allow the project custom files to be stored as source 
#                   files
#
function custom_rebuild()
{
   $decho "start custom_rebuild"
   #
   gotOne=0
   while [ $gotOne = "0" ]
   do
      # prompt user for source location,
      get_string "Rebuild Custom File(s)" \
              "Enter path to build source files:" \
              "srcName" $prjCustomSrc"/"
      if [ $? != "0" ] ; then
         return 0
      fi
      # ignore if ESC, help or blank line entered
      if [ -z "$srcName" ] ; then
         $decho "end custom_rebuild 0 (no source)"
         return 0
      fi
      # 
      if [ ! -d "$srcName" ] ; then
         mkdir -p $srcName
         if [ -d "$srcName" ] ; then
            gotOne=1
         else
             show_message "Could not Create Source Directory" \
                 "Some internal problem I suppose"
         fi
      else
         show_confirm "Directory exists"  \
            "Overwrite contents with custom files ?"
         if [ $? = "0" ] ; then 
            gotOne=1
         fi
      fi
   done
   #
   # simply copy from our custom directory to given directory
   # 
   cp -rfaxv $PWL_PRJ/$CUSTOM_DIR/* $srcName > .results
   #
   # now rebuild the source reference file from scratch
   #
   rm -f $PWL_PRJ/$CUSTOM_SRC
   custom_source $srcName "/"
   #
   show_results .results "Rebuilt custom sources from these files:"
   #
   #
   $decho "end custom_rebuild"
}

#
#
#
function custom_depend()
{
   # list dependencies required for all custom files
   #
   for custFn in `cat $PWL_PRJ/$CUSTOM_LST` ; do
      if [ -x $PWL_PRJ/$CUSTOM_DIR/$custFn ] ; then
         # check only exectables (directories are executable)
         # no way to tell if its executable shell or binary file, just
         # parse away the error message
         #
         if [ ! -d $PWL_PRJ/$CUSTOM_DIR/$custFn ] ; then
            echo "# Dependancies for custom file: $custFn"
            #
            ldd $PWL_PRJ/$CUSTOM_DIR/$custFn 2> /dev/null | \
               grep -v "not a dynamic executable" | cut -f1 -d"="  | cut -f2
         fi
      fi
   done
}

#
#
#
function custom_reload()
{
   $decho "start custom_reload"
   #
   # for each directory or file specified by the user, add that back
   #
   grep "^#" $PWL_PRJ/$CUSTOM_SRC | sed s/\#//g > .custom.srcdirs
   #
   for srcDestFn in `cat .custom.srcdirs` ; do
      destFn=${srcDestFn##*=}
      srcFn=${srcDestFn%%=*}
      #
      $decho "Reloading source files from $srcFn"
      custom_source $srcFn $destFn
      custom_add $srcFn $destFn
   done
   #
   $decho "done custom_reload"
}

#
# custom_new - creates new custom files and records process
#
function custom_new()
{
   $decho "start custom_new"
   #
   # prompt for source and destination
   #
   gotOne=0
   while [ $gotOne = "0" ]
   do
      # prompt user for source location,
      get_string "Add Custom File(s)" \
              "Enter path to source file or directory:" \
              "srcName" $prjCustomSrc"/"
      if [ $? != "0" ] ; then
         return 0
      fi
      # ignore if ESC, help or blank line entered
      if [ -z "$srcName" ] ; then
         $decho "end custom_new 0 (no source)"
         return 0
      fi
      # valid only if file exists
      if [ -L "$srcName" ] ; then
         gotOne=1
      elif [ ! -e "$srcName" ] ; then
         show_message "File Not Found" " Check path and name and guess again"
      else
         gotOne=1
      fi
   done
   #
   # likewise, get destination location
   #
   gotOne=0
   while [ $gotOne = "0" ]
   do
      #
      # prompt user for a destination
      #
      get_string "Add Custom File(s)" \
              "Enter path and name (from root) of final destination" \
              "destName" "/"
      #
      # do nothing if "esc" key, help or blank name entered
      #
      if [ $? != "0" ] ; then
         return 0
      fi
      if [ -z "$destName" ] ; then
         $decho "end custom_new 0 (no dest)"
         return 0
      fi
      #
      # check to see if we are overwriting any existing files
      #
      if [ -e "$PWL_PRJ"/"$CUSTOM_DIR"/"$destName" ] ; then
         show_confirm "Destination File(s) exist" \
                       "Overwrite files in $CUSTOM_DIR$destName ?"
         if [ $? = "0" ] ; then
            # valid destination confirmed to overwrite
            gotOne=1
         fi
      #
      else
         # valid destination
         gotOne=1
      fi
   done
   #
   # Update the custom list configuration
   #
   custom_source $srcName $destName
   custom_add    $srcName $destName
   if [ ! $? = 0 ] ; then
      show_message "Custom files not added" \
                   "Could not add to project the custom file $srcName"
   else
      #
      # Tell user how happy we are now
      #
      show_message "Custom files from $srcName" \
                "Added to project at $destName"
   fi
   #
   $decho "end custom_new 1"
   return 1
}

#
# custom_init
#
function custom_init()
{
   #
   #  Check for configuration files, default if required
   #  -- CUSTOM_LST lists all the files enabled
   #    (default all files in custom dir - allows manual build)
   #
   dir_tree_list_all "$PWL_PRJ/$CUSTOM_DIR" .result
   if [ ! -f "$PWL_PRJ/$CUSTOM_LST" ] ; then
      cp .result "$PWL_PRJ/$CUSTOM_LST"
   fi
   #
   #  -- <dot>CUSTOM_LST - temporary file for current configuration
   #
   if [ ! -f "$PWL_PRJ/.$CUSTOM_LST" ] ; then
      #
      # create default for this configuration
      #
      cp "$PWL_PRJ/$CUSTOM_LST" "$PWL_PRJ/.$CUSTOM_LST"
   fi
   #
   $decho "done custom init"
}

#=============================================================================
#
#  menu_custom
#
function menu_custom()
{
   $decho "start menu_custom"
   #
   local customDone=0
   local filesDefault=""
   local currDir="$PATH_CUSTOM"
   #
   # operate custom configuration menu until exit pressed
   #
   while [ "$customDone" = "0" ]; do
      #
      #  build list of files from custom directory, flag based on status file
      #
      build_custom .custom.lst $currDir
      show_files "Configure Custom Files Menu" .custom.lst 2>.result
      retVal=$?
      read selection <.result
      #
      # only assign default for files selected
      #
      # Operate on command selected or toggle file
      #
      case "$retVal" in
         1|255)
            # esc or exit selected
            #
            customDone=1
            ;;
         2)
            sed -n /^######/,/^######/p $0 | sed 's/^#*//g' > pwl_custom.README
            #
            # show help for custom configuration
            #
            show_help pwl_custom.README menu_custom    # show help
            ;;
         0|3|4|5|6)
            # file or command selected, assign default
            filesDefault=$selection
            #
            # operate command or toggle
            #
            if [ $selection = "Define" ] ; then
               # define source location and copy new custom file(s)
               custom_new
            #
            elif [ $selection = "Delete" ] ; then
               # prompt to delete all references to custom file(s)
               custom_remove "/"
            #
            elif [ $selection = "Reload" ] ; then
               # delete existing files, reload from source directories
               custom_delete "/" FILES_ONLY
               custom_reload

            elif [ $selection = "Rebuild" ] ; then
               custom_rebuild

            elif [ $selection = "Add" ] ; then
               # include all custom files
               dir_tree_list_all $PWL_PRJ/$CUSTOM_DIR $PWL_PRJ/.$CUSTOM_LST
            #
            elif [ $selection = "Remove" ] ; then
               # exclude all custom files
               echo "" > $PWL_PRJ/.$CUSTOM_LST
            #
            elif [ $selection = "Total"  ] || [ $selection = "Skip" ] ; then
               # ignore misc stuff
               xx=1
            #
            elif [ $retVal != "0" ] ; then
               # toggle as included or excluded in file list
               custom_toggle $selection
            else
               # traverse directories if "ENTER" pressed
               #
               if [ -d $currDir/$selection ] ; then
                  # traverse into a selected directory, and record its path
                  # 
                  tmploc=$PWD
                  cd $currDir/$selection
                  currDir=$PWD
                  cd $tmploc
               fi
            fi
            ;;
         #
         *)
               # default
            ;;
      esac
      #
   done
   #
   # return clean
   #
   $RM .custom.lst pwl_custom.README 
   filesDefault=""
   $decho "end  menu_custom"
}

#
# main - parse commands and execute them - display menu otherwise
#
function custom_main()
{
   $decho "start custom_main"
   #
   progInfo="`basename $0` - Version $PWL_PROJECTS_VER"
   if [ "$backtitle" = "" ] ; then
      backtitle=$progInfo
   fi
   #
   # use last project or pick one - if none exists, then leave
   #
   if [ -z "$CFG_BASE" ] ; then
      pwl_init_project
   fi
   #
   # execute a command if provided
   #
   gotOne=0
   while [ "$1" != "" ] ; do
      parm=$1
      shift
      $decho "parse $parm $*"
      case "$parm" in
         "--help")
            usage
            ;;
         "--project")
            pwl_init_project $1
            if [ "$2" != "" ] ; then
               shift
            fi
            ;;
         "--init")
            custom_init
            ;;
         "--toggle")
            custom_toggle $1
            shift
            ;;
         "--delete")
            custom_delete $1
            shift
            ;;
         "--depends")
            custom_depend
            ;;
         "--add")
            custom_add $1 $2
            shift ; shift
            ;;
         "--source")
            custom_source $1 $2
            custom_add $1 $2
            shift ; shift
            ;;
         "--extract")
            custom_extract $1
            # print count of files extracted on stderr stream
            echo "$?"  1>&2
            shift
            ;;
         "--update")         # check source files, update if required
            custom_update
            ;;
         "--refresh")        # check mounted files, update custom if required
            custom_refresh $1 $2
            shift ; shift
            ;;
         *)
            usage "Invalid command $*"
            ;;
      esac
      gotOne=1;
   done
   #
   if [ "$gotOne" = "0" ] ; then
      custom_init
      menu_custom
   fi
}

# start here
  debug_mode 1           # set to 1 to enable debug macros

  $decho "START $0"

  custom_main $*

  $decho "END $0"
#
# end
#
