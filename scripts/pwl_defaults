#! /bin/bash
#
###
# Usage: pwl_defaults [ cmd [ parmeters ] ... ]
#
#      Performs maintenance on Pee Wee Linux default project
#      configuration.  Works from command line or interactively.
#
#   "cmd"    "parameters"        Results
#   --type   <device type>     assigns default device type
#   --reset  [<device type>]   reset the parameters to defaults for
#                                current device type (or given type)
#   --change <parmId> value    assigns parameter value to the parmId
#   --init                     defines all configured parameters
#   --save                     save temporary defaults
#   --help                     this help screen
#   --project project name     use this project (default is last project)
#
###
#
# History see CHANGES.pwlconfig
#
# Comments:
#  The project defaults are contained in a defaults shell file.
#  Executing this default file updates the internal variables
#  used for the project.  Any shell script that needs to interact
#  with a project should run the defaults script to setup the project
#  environment (use --init command).
#
######
#pwl_defaults.README
#
#  The project configurations define parameters that let you build your
#  project for several different target devices.
#
#  For initial system development, building a file system on a floppy
#  is probably the easiest. Once this boots, you can simply select
#  another device and boot that and start expanding your project.
#
#  Or, you can build your file system for a Disk-On-Chip, change this
#  parameter and create a bootable CD-ROM.
#
#     Short-Cut: use pwl_defaults --help to see command line
#                options for changing parameters programatically.
#
#     Short-Cut: edit the projects/<project name>/project.defaults
#                file, but keep the format intact so pwl_defaults
#                can read it.
#
#  Reset Project Defaults
#
#     Selecting this option will reset all configuration parameters
#     to their default settings.
#
#  Save Project Defaults
#
#     As usual, all changes are only temporary until they are saved.
#     Select Save here to capture your changes at anytime.  Also, every
#     time you save your project the defaults are also saved.
#
#  Target Selection
#
#     Selecting this option will prompt you to select a target
#     environment to use. It will determine the filesystem and
#     partitioning strategy for your target device.
#
#  Global Parameters:
#
#    Project Mount Point: ./project/name/mnt
#       This is a directory where your project will be "extracted" to.
#       Change this name if you want a backup of your file system.
#
#    Project Custom Source Path: /root/custom
#       This is a directory where your custom files reside. Consider
#       this the root of a file system tree where custom files are
#       taken from and inserted into the extracted file system.
#
#    Device Mount Point: ./mnt
#       This is where pwlconfig will default to mounting your device.
#
#    Boot Image Name: bzImage
#       This is the name of the kernel file you created when you
#       re-built your kernel (or choose a package kernel file).
#       These are usually given names like bzImage, vmlinuz, doc2000
#       and so on.
#
#    Ramdisk Image Name: ramdisk
#       This is the name of the ramdisk file the target build script
#       may create.
#
#    Initrd Image Name: initrd
#       This is the name of the initrd file the target build script
#       may create.
#
#    Modify System Boot Files: yes
#       This option determines if the target load scripts will modify
#       the rc.init and fstab files during the target load operation.
#       The recommended setting is yes. Setting this option to no
#       allows for specific rc.init and fstab files to be included as
#       custom files.
#
#  Boot Loader Options:
#
#    Boot Label: linux
#       When LILO or syslinux boots your device, you can usually press 
#       TAB to see a list of kernels to boot from.  The name that appears
#       is the name you specify here.
#
#    Boot Prompt Timeout: 5
#       This is the time LILO or syslinux give you to press TAB or type
#       the boot image to load at the boot prompt.
#
#    VGA Mode: normal
#       This is the VGA mode used for framebuffer operation.
#
#    Append Options
#       The options specified to the parameter line passed to the kernel.
#       Example: debug=0 results in append = "debug=0" in lilo.conf. 
#
#  Floppy Target Parameters
#
#    Floppy Device: /dev/fd0
#       The device onto which the target build script will install the
#       system if a floppy based target is selected.
#
#    Free Space on Ramdisk: 500
#       The amount of free space in kB on the uncompressed ramdisk.
#
#  IDE Flash (or HD) Target Parameters
#  
#    Target Device: /dev/sda
#       The target device name on the development system your PeeWeeLinux
#       system will be build on. Be careful here. The target build script
#       will destroy any existing content on this device!
#
#    Boot Device: /dev/hda
#       How the target device will be known as on the final target sytem.
#       It is unlikely you will have to change this parameter.
#
#  Single Ramdisk Parameters
#
#    Free Space on Ramdisk: 2000
#       The amount of free space in kB on the uncompressed ramdisk for a
#       target sytem with a single ramdisk.
#
#  Multiple Ramdisk Target Parameters
#
#    Free Space on /dev Ramdisk: 1000
#       The amount of free space in kB on the /dev ramdisk. Note that even
#       though device don't consume space they consume inodes. The target
#       build script tries to create as many inodes as possible for the 
#       /dev ramdisk.
#
#    Free Space on /etc Ramdisk: 100
#       The amount of free space in kB on the /etc ramdisk. Since the /etc
#       partition is likely to contain configuration files only that one
#       wouldn't expect to change dramatically there shouldn't be any need
#       for a serious amount of empty space.
#
#    Free Space on /home Ramdisk: 500
#       The amount of free space in kB on the /home ramdisk.
#
#
#END
######
#=============================================================================
#
# include generally handy functions
#
if [ -f "./scripts/pwl_functions" ] ; then
  . ./scripts/pwl_functions
elif [ -f "./pwl_functions" ] ; then
  . ./pwl_functions
else
  echo "script pwl_functions not found"
fi
#
PWL_DEFAULTS_VER=${PWL_REL_VER}".2"
# make sure we have a version number
if [ -z "$PWL_VER" ]; then
    PWL_VER="$PWL_DEFAULTS_VER"
fi
#
#
#=============================================================================
#
# The following section contains default parameters for various devices
# This section is parsed to create the initial default configuration file.
#
#VARIABLES
#
##  Configuration file for Pee Wee Linux project
##  Execute this script to assign project parameters
##   maintained by pwl_defaults - or carefully updated by hand
##
##    format: parmName=parmValue  # Prompt: Text message to display
##
## Project defaults (some may be overridden interactively)
##
#
##SEC Global configuration parameters
#
#export prjMnt="mnt"                   # Prompt: Project Mount Point
#export prjCustomSrc="/root/custom"    # Prompt: Project Custom Source File path
#export rd_mount="./mnt"               # Prompt: Device Mount Point
#export rd_kernel="bzImage"            # Prompt: Boot Image Name
#export rd_ramdisk="ramdisk"           # Prompt: Ramdisk File Name
#export rd_initrd="initrd"             # Prompt: Initrd File Name
#export rd_initscripts="y"             # Prompt: Modify System Boot Files
#
##SEC Boot loader options
#
#export rd_bp_label="linux"            # Prompt: Boot Label
#export rd_bp_time="5"                 # Prompt: Boot Prompt Timeout
#export rd_bp_vga="normal"             # Prompt: VGA Mode
#export rd_bp_append=""                # Prompt: Append Options
#
## Some project specific parameters not changed in pwl_defaults
## Delimited by leading space
# export target_scheme="comp_rd_ext2"  # Prompt: Target
# export pwl_version=""                # Prompt: PeeWeeLinux Version
#
##SEC floppy target configuration parameters
#
#export rd_floppy="/dev/fd0"           # Prompt: Floppy Device
#export rd_ramdisk_fd_free="500"       # Prompt: Free Space on Ramdisk
#
##SEC ide flash target (or HD) configuration parameters
#
#export rd_target="/dev/sda"           # Prompt: Target Device
#export rd_boot="/dev/hda"             # Prompt: Boot Device on Target System
#
##SEC single ramdisk target configuration parameters
#
#export rd_ramdisk_free="2000"         # Prompt: Free Space on Ramdisk
#
##SEC multiple ramdisk target configuration parameters
#
#export rd_dev_free="1000"             # Prompt: Free Space on /dev Ramdisk
#export rd_etc_free="100"              # Prompt: Free Space on /etc Ramdisk
#export rd_home_free="500"             # Prompt: Free Space on /home Ramdisk
#
#END
#
#
#=============================================================================
#
# make_default( [ default_file ] )
#     builds initial default parameters file for given device type
#     Parses the defaults found in this file (above)!
#
function make_default()
{
   $decho "start make_default $*"

   if [ "$1" != "" ] ; then
      dftFile="$1"
   else
      dftFile="$PWL_PRJ/.$DEFAULT_CFG"
   fi
   $decho "build default file $dftFile"
   #
   # parse default section to define all parameters
   #
   sed -n /^#VARIABLES/,/^#END/p $0 | grep -v '^#VARIABLES' | grep -v '^#END' | sed s/^#//g > $dftFile
   #
   $decho "done make default"
}

#
# default_change ( parameterName, [ parameterValue, [ padding ] ] )
#
function default_change()
{
   $decho "start default_change $*"
   #
   if [ "$1" = "" ] ; then
     return
   fi
   chgParm=$1
   if ! grep -qs "$chgParm=" $DFT_FILE_TMP ; then
      return   # invalid parameter name specified
   fi
   lineIn="`grep "$chgParm=" $DFT_FILE_TMP`"
   $decho Got Line $lineIn
   #
   # parse the line
   #
   tmpName="${lineIn%%=*}"
   parmName="${tmpName##*export }"
   #
   parmLine="${lineIn#*=}"          # allow "=" in parmValue
   tmpValue="${parmLine%#*}"       # allow "#" in parmValue
   #
   # remove quotes for better visibility
   #
   parmValue=`echo "$tmpValue" | sed s/\"//g`  
   #
   promptValue=""
   promptValue=${lineIn##*Prompt: }
   #
   # prompt or use given new value
   #
   if [ "$2" = "" ] ; then
      #
      # prompt for new value
      #
      get_string "Assign Project Default" \
                 "Enter new default value for $promptValue:" \
                 newValue $parmValue

      if [ "$?" != "0" -a "$?" != "2" ]; then
          return
      fi	  
      if [ -z "$newValue" ] ; then
          #
	  # allow a zero return value for append option
	  #
          if [ "$parmName" != "rd_bp_append" ]; then
              return
	  fi    
      fi
   elif [ "$2" = " " ]; then
      #
      # detect dummy data and remove
      #
      newValue=""
   else
      #
      # use the value passed
      #
      newValue=$2
   fi
   # lets use sed to replace the value and keep the order of the file
   sed "/${chgParm}=/s"'\.*\'"${3}export $parmName=\"$newValue\"   # Prompt: $promptValue"'\' $DFT_FILE_TMP > .dft.tmp
   #
   cp .dft.tmp $DFT_FILE_TMP
   #
   $decho "done default_change"
}

#
#  default_save( [keepTmp] )
#
function default_save()
{
   $decho "start default_save"
   if [ -f "$DFT_FILE_TMP" ] ; then
      cp -f $DFT_FILE_TMP "$PWL_PRJ/$DEFAULT_CFG"
      if [ "$1" = "" ] ; then
         rm -f $DFT_FILE_TMP
      fi
   fi
   $decho "end default_save"
}


#
# default_reset( [device type] )
#     prompts for device type or uses given device type to generate
#     the default configuration file
#
function default_reset()
{
   $decho "start default_reset"
   #
   make_default
   #
   # Update version info
   #
   default_change pwl_version $PWL_VER " "
   #
   $decho "done default_reset"
   return 0
}


#
# default_setup( )
#
function default_setup()
{
  $decho "start default_setup"
  #
  if [ ! -f "$PWL_PRJ/$DEFAULT_CFG" ] ; then    # no configuration found
     default_reset                              # generate default config file
  fi
  #
  # make sure we have a temporary default
  #
  if [ ! -f "$DFT_FILE_TMP" ] ; then
     cp "$PWL_PRJ/$DEFAULT_CFG" $DFT_FILE_TMP
     $decho "created temp default: $DFT_FILE_TMP"
  fi
  #
  $decho "end default_setup"
}

#=============================================================================
#
# default_version_check
# 
# This function checkes the version of the configuration file and displays
# appropriate warning messages
#
# 1. case config file pre 0.53
#
function default_version_check () 
{
    #
    # no version info
    #
    if [ -z "$pwl_version" ]; then
        $decho "incompatible defaults file..."
        # show dialog box
        show_confirm "Configuration File Incompatibility" \
            "The configuration file is pre 0.53 and incompatible with PeeWeeLinux $PWL_VER. Reset the configuration for $CFG_BASE now?" "9"
        if [ $? = "1" ] || [ $? = "255" ]; then
            $decho "Nothing was done. User cancelled..."
	    return 1
        else
            default_reset
            if [ "$?" = "1" ] ; then
                cleanup 1
            fi
            default_define   # now load default variables
            show_message "Configuration Reset" \
                "The configuration for $CFG_BASE has been reset. Please check settings"
            $decho "Reset configuration..."
        fi
    #
    # non matching version info
    #
    elif [ "$pwl_version" != "$PWL_VER" ]; then
        $decho "nonmatching version defaults file...."
	# show dialog box
	show_confirm "Old Configuration File" \
	    "The configuration file is version $pwl_version. You are using PeeWeeLinux $PWL_VER. Do you wish to convert your configuration file to the current version now?" "8"
	if [ $? = "1" ] || [ $? = "255" ]; then
	    show_message "No Conversion Done" \
	        "You will not be able to load target hardware until the configuration has been upgraded."
	    $decho "Nothing was done. User cancelled..."
	else
	    $decho "Converting file...."
	    # strip comments and blank lines
	    cat $DFT_FILE_TMP | grep -v "^[ ]*$" | grep -v "^#" > .dft.upgrade
	    # create new defaults file
	    make_default
	    #
	    # parse old data and import into new file
	    #
	    while default_read_function; do
	        echo -n "."
	        # require padding?
	        if echo "$lineIn" | grep -q "^ "; then
		    tmpPad=" "
		else
		    tmpPad=""
		fi
		# get parm name
		tmpName="${lineIn%%=*}"
		parmName="${tmpName##*export }"
		# get parm value
		parmLine="${lineIn#*=}"
		tmpValue="${parmLine%#*}"
		# strip quotes and trailing blank space
		parmValue=`echo $tmpValue | sed 's/\"//g' | sed 's/[ ]*$//'`
		# we have to send something. An empty parameter is not
		# allowed. So make sure there's at least a space.
		if [ -z "$parmValue" ]; then
		    parmValue=" "
		fi    
                #
		# change value in new file
		#
		$decho "Importing <$parmName>..." 
		$decho "Value <$parmValue>..."
		default_change "$parmName" "$parmValue" "$tmpPad"
		lineCnt=$(($lineCnt + 1))
	    done < .dft.upgrade
	    $RM .dft.upgrade
	    # set our version info properly
	    default_change pwl_version $PWL_VER " "
	    # now load new settings
	    default_define
	    # show message
	    show_message "Configuration Reset" \
	        "The configuration for $CFG_BASE has been converted to version $pwl_version. Please check settings"
            $decho "Done converting...."
	fi
    fi	
}	    
#
# default_read_function
# 
# This is a subfunction to parse data from the defaults file
#
function default_read_function () {
    local IFS
    IFS=""
    read lineIn
}
#
#=============================================================================
#
# show_defaults ( title,  pack.lst )
#    Show the dialog list
#
function show_defaults()
{
   if [ -z "$defaultsDefault" ] ; then
      filesDefault=Add
   fi
   echo -n $DIALOG --title "$1" \
                   --backtitle \"$backtitle\"       \
                   --menu                           \
"'Select operation or configuration parameter           Project: $CFG_BASE'" \
              $ROWS $COLS $((ROWS-8)) \
              " '$defaultsDefault' " > .dialog

   cat $2 >> .dialog
   . ./.dialog
}

#
# build_defaults( default.lst )
#     Create a dialog list file for interactive display
#
function build_defaults()
{
   $decho "start build_defaults"

   echo -n "'Reset'  'Reset Project Configuration' " > $1
   #
   if [ ! -f "$2" ] ; then
      return
   fi
   echo -n "'Save'   'Save Project Configuration'             \
            'skip'    '----' "                           >>$1
   #
   # Add target defaults
   #
   echo -n " 'Sel'    'Target: $target_scheme_desc -->' " >>$1
   #
   # remove any lines that start with spaces and blank lines
   #
   cat $2 | grep -v "^ " | grep -v "^[ ]*$" | cat > .dft.tmp
   #
   # process commands
   #
   #
   while default_read_function ; do
         #
         # parse the line  format is:
         #  export [ parmName ] = [ parmValue ] # Prompt: [ promptValue ]
         #  ^^^^^^
         # Optional
         #
         # Sections headings are defined to begin with #SEC
         #
         if `echo $lineIn | grep -q '^#'` ; then    # this matches a comment 
             #
             if `echo $lineIn | grep -q '^#SEC'`; then
                 #
                 secTitle=`echo $lineIn | sed 's/^#SEC //'`
                 #
                 echo -n " 'skip'   '--- ${secTitle} ---' " >>$1 
                 #
             fi
         else                                    # It should be a parameter
             #
             tmpName="${lineIn%%=*}"
             parmName="${tmpName##export }"
             #
             parmLine="${lineIn#*=}"             # allow "=" in parmValue
             parmValue="${parmLine%#*}"
             #
             promptValue=${lineIn##*Prompt: }
             #
             # output for dialog
             #
             echo -n  " '$parmName' '$promptValue: $parmValue' " >> $1
             #
         fi
   done < .dft.tmp
   #
   $RM  .dft.tmp
   $decho "done build_defaults"
}

#
# menu_project - operate on system projects
#
function menu_defaults()
{
   $decho "menu_defaults"
   defaultsDone="0"
   #
   while [ "$defaultsDone" = "0" ] ; do
      #
      #  build list of projects from projects directory
      #
      build_defaults .defaults.lst $DFT_FILE_TMP
      #
      show_defaults '"Project Defaults Menu"' .defaults.lst 2>.result

      retVal=$?
      read selection <.result
      defaultsDefault=$selection

      case "$retVal" in
         1|255)                      # exit
            defaultsDone=1
            ;;
         2)
            sed -n /^######/,/^######/p $0 | sed 's/^#*//g' > pwl_defaults.README

            show_help pwl_defaults.README menu_defaults   # help
            ;;
         0|3|4|5|6)                  # toggle project or operate on current
           #
           case "$selection" in
             "Reset")
                default_reset        # prompt to confirm and replace it
                ;;
             "Save")
                default_save YES     # save, but keep temporary configuration
                ;;
             "Sel")                  # select new target scheme
                $PWL_ENVSEL --desc .newtarget
		# only do something if .newtarget is returned
		if [ -f .newtarget ]; then
                    chmod 777 .newtarget
                    . ./.newtarget
                    $RM  .newtarget    # use for internal variable
                    default_change target_scheme $target_scheme " "
		fi    
                ;;
             "Skip"|"skip")
                xx=1
                ;;
	     "rd_initscripts")
	        # the rd_iniscripts variable gets special treatment
		# it's a simple yes/no question
                $decho "Change rd_inistscripts setting..."
		show_confirm "Modify System Boot Files?" \
		   "This option determines if the target load scripts will modify the rc.init and fstab files during the target load operation. The recommended setting is yes. Setting this option to no allows for specific rc.init and fstab files to be included as custom files." "10"
                if [ $? = "1" ] || [ $? = "255" ]; then
                    $decho "User selected no..."
		    default_change "rd_initscripts" "n"
		else
		    $decho "User selected yes..."
		    default_change "rd_initscripts" "y"
                fi
                $decho "End change rd_inistscripts setting..."
		;;
             *)                      # assign new value to selected variable
                default_change $selection
              ;;
           esac
      esac
   done
   $RM  .defaults.lst .result pwl_defaults.README
   $decho "done menu_defaults"
}
#
# pwl_default_init - initialize project
#
function pwl_default_init()
{
   #
   # use last project or pick one - if none exists, then leave
   #
   if [ -z "$CFG_BASE" ] ; then
      pwl_init_project
   fi
   target_scheme_desc=`eval $PWL_ENVSEL --desc`
}
#=============================================================================
#
# main - parse command line
#
function default_main()
{
   progInfo="`basename $0` - Version $PWL_DEFAULTS_VER"
   if [ "$backtitle" = "" ] ; then
      backtitle=$projInfo
   fi
   pwl_default_init
   #
   # otherwise, parse command line and execute commands or do interactive
   #
   gotOne=0
   while [ "$1" != "" ] ; do
      $decho "parse $*"
      case "$1" in
         "--help")                   #--help
            usage
            ;;
         "--project")
            pwl_init_project $2
            if [ "$2" != "" ] ; then
               shift
            fi
            ;;

         "--type")                   #--type  DOC | FLOPPY
            deviceType="$2"
            shift
            ;;

         "--init")                   #--init
            default_setup
            default_define
            gotOne=1
            ;;

         "--reset")                  #--reset
            default_reset 
            if [ "$?" != "0" ] ; then
               $decho "end default_reset not done 1"
               exit 1
            fi
            if [ ! "$2" = "" ] ; then
               shift
            fi
            gotOne=1
            ;;

         "--change")                 #--change parm new_value
            if [ "$2" = "" ] ; then
               usage "No parameter specified"
            fi
            if [ "$3" = "" ] ; then
               usage "No new value specified"
            fi
            default_setup                # validate setup
            default_change $2 $3
            default_define               # load current configuration
            shift ; shift
            gotOne=1
            ;;

         "--save")                    #--save
            default_save
            gotOne=1
            ;;

         *) usage "Invalid command $*"
            ;;
      esac
      shift
   done
   #
   # do interactive operation
   #
   if [ $gotOne = "0" ] ; then
      #
      usrMode="I"
      default_setup
      default_define              # use current "temporary" defaults
      default_version_check
      if [ "$?" = "0" ]; then
           menu_defaults
      fi	   
           default_define         # use changed "temporary" defaults
   fi
}

# start here
  debug_mode 0              # set to 1 to enable debug macros
  $decho "START $0"

  default_main $*

  $decho "END $0"
  exit 0
#
# end
#
