#! /bin/sh
#
# DOConfig  - script to configure Disk on Chip
#
#    Copies files from <pakages>.tar as listed in doc.conf 
#    Actual files are specified in <package>.list
#    Manual "fdisk" or similiar is required before using this script!
#
#    Created by Ralph Stickley rstickley@datalux.com
#    Many Features copied from init.d scripts
#
#    Built for Pee Wee Linux created by Adi Linden 
#
# History
#    V0.3 - seperate file system and boot operation
#    V0.2 - tested using updates directory and create lilo.doc.conf
#    v0.1 - released not tested
#
# Make sure we're really running bash.
#
[ -z "$BASH" ] && { echo "DOConfig requires bash" 1>&2; exit 1; }
#
#  constants for this shell script
#
VER=0.4
[ -z "$COLUMNS" ] && COLUMNS=80
RES_COL=40
[ -z "$MOVE_TO_COL" ] && MOVE_TO_COL="echo -en \\033[${RES_COL}G"
#
# utility programs, may vary with distro or preference
#
FMT_FS=/sbin/mke2fs
[ -z "$PLILO" ] && PLILO=./Lilo6_21
#
# System files used by shell script
#
CFG_FILE=doc.conf
LILO_FILE=lilo.doc.conf
LST_FILE=files.lst
DOC_LOG=doc.log
#
#  constants for system directory structure
# 
PKG_DIR="../packages"
DOC="./mnt"
DOC_DEV=/dev/fla1
DOC_UPDATES=./updates
#
#
#
# Function: Usage
#
DOCUsage() {

   echo ""
   echo -e "doc \t\t Disk On Chip shell utility - V"$VER""
   echo ""
   echo "Usage: doc  -[E f s u] mnt"
   echo "   -E   Erase disk on chip at $DOC"
   echo "   -f   create files from file $CFG_FILE"
   echo "   -s   store snapshot of files in $LST_FILE"
   echo "   -u   Update MBR of DOC with Lilo (patched)"
   echo "   mnt  mount point for Disk On Chip filesystem"
   echo ""
}
#
# Function: DOCMounted  (ExitOnError)
#
DOCMounted() {
   #
   # check if device is mounted (maybe someplace else)
   #
   if ! grep -iq "$DOC_DEV" /proc/mounts ;  then
      echo Device $DOC_DEV not mounted
      if [ ! $# = "" ]; then
         exit 0
      else
         return 0
      fi
   fi
   #
   # verify $DOC is mounted at $DOC_DEV
   #
   mntpt=`basename $DOC`
   if ! grep -i $mntpt /proc/mounts | grep -iq "$DOC_DEV"  ; then
      echo Disk-On-Chip not mounted at $DOC
      if [ ! $# = "" ]; then
         exit 0
      else
         return 0
      fi
   fi
   # valid mount, return true
   return 1
}
#
# Function: DOCLilo_conf
#
DOCLilo_conf() 
{

   if [ -f $LILO_FILE ]; then
      echo Using Lilo configuration file: $LILO_FILE
   else
      echo ""
      echo Lilo configuration file created: $LILO_FILE
      #
      #  make the file
      #
      cat <<- EOF > $LILO_FILE
	disk=/dev/fla bios=0x80       # tell lilo to treat DOC as if we booted from it
	boot=/dev/fla                 # Install lilo on DOC
	map=$DOC/boot/map             # build map file on DOC
	install=$DOC/boot/boot.b6-21  # use boot.b file found here
	prompt                        # show LILO prompt
	timeout=50                    # for 5 seconds

	image=$DOC/boot/doc2000       # use this image
	      label=doc2000           # called this
	      root=/dev/fla1          # found here when we boot 
	      read-only               # mount read-only to run fsck
	EOF
   fi
   #
   # lilo complains if anyone else can write the file
   # change to readonly
   # 
   chmod 644 $LILO_FILE
}

#
# function: DOCLilo
#
DOCLilo() {
   #
   # build lilo configuration file if not already built
   # 
   DOCLilo_conf
   #
   #  if Disk on chip is mounted, ask to lilo it
   #
   if [ ! -f $PLILO ]; then
      echo ""
      echo Lilo \(patched\) not found: $PLILO
      echo ""
      return 0
   fi
   DOCMounted
   if [ "$?"="1" ]; then
      echo -n "Enter 'L' to run lilo on DOC: "
      read ans
      if [ "$ans"='L' ]; then
echo executing $PLILO -C $LILO_FILE
         $PLILO -C $LILO_FILE
      fi
      sync
   fi
   return 1
} 
#
# function: DOCList
#
DOCList() {
#
   loc=$PWD
   echo -n Creating file: $loc/$LST_FILE
   cd $DOC
   #
   # use du to list - there may be a better way
   #
   du . -a | cut -f2 | sort -u > $loc/$LST_FILE
   #
   cd $loc
   #
   echo ...done
}

#
# function: DOCBackup filename
#
DOCBackup() {
   #
   #  backup to new backup file
   #
   if [ -f $1 ]; then 
      bakn=1
      while [ -f "$1".$bakn ]; do
         bakn=`expr $bakn + 1`
      done
      cp  $1  "$1".$bakn
      echo Backing up $1 to "$1".$bakn
   fi
}

#
# function DOCExtract
#
DOCExtract() {
  
   echo -n Extracting files from:  
   $MOVE_TO_COL
   echo as specified in:
   #
   loc=$PWD
   ln=1
   #
   for nfile_lst in `cat $CFG_FILE`; do
       #
       # each list file needs it's tar ball untarred at mount point
       #
       tar_file=`basename $nfile_lst list`"tar"   
       tar_dir=`dirname $nfile_lst`
       #
       if [ ! -f "$tar_dir"/"$tar_file" ] ; then
          echo $CFG_FILE Error: $tar_file not found \(line  "$ln"\)
       else
          #
          #        nice printout of whats happening
          cd $DOC
          echo -n $tar_file
          $MOVE_TO_COL
          echo $nfile_lst
          #
          #  -T option seems to generate errors for empty directories
          #
          tar -xT "$loc"/"$nfile_lst" -f "$loc"/"$tar_dir"/"$tar_file"  >/dev/null 2>/dev/null
          cd $loc
       fi
       #
       ln=`expr $ln + 1`    # increment line counter
   done
}
#
# Function: DOCUpdate
#
DOCUpdate() {
   if [ -d $DOC_UPDATES ]; then
      #
      echo Updating with New Files:
      # 
      # just copy this file tree to the new filesystem ??
      #
      #  ?? How do you get "long filenames" copied to dosfs ??
      #
      cp -axv $DOC_UPDATES/* $DOC
   fi
}
#
# DOC main()
#
   #
   # At least one parameter required 
   #
   if [ "$1" = "" ]; then
      DOCUsage
      exit 0
   fi
   #
   # command line parameter #2 - change DOC mount point
   #
   if [ ! "$2" = "" ]; then
      DOC=$2 
   fi
   #
   # Verify DOC mount point exists or create it
   #
   if [ ! -d $DOC ]; then
        echo Creating Disk-On-Chip mount point at: $DOC
        mkdir $DOC 
   else
      echo Disk On Chip File System at: $DOC
   fi
   case "$1" in
      #
      # Command:  Erase DOC
      #
      -E)
         echo Creating Filesystem on Disk-On-Chip \("$DOC_DEV"\) at $DOC
         #
         umount  $DOC_DEV       >  $DOC_LOG  2> $DOC_LOG
         $FMT_FS $DOC_DEV       >> $DOC_LOG
         mount   $DOC_DEV $DOC  >> $DOC_LOG  2> $DOC_LOG
         #
         # verify mount
         #
         DOCMounted  ExitOnError
         #
         echo Formatted and Mounted Disk On Chip at $DOC
         #
         #
         ;;                    # end -E
      #
      # Command: Snapshot of Current FileSystem
      #
      -s)
         #
         # make sure we have something to take a picture of
         #
         if [ ! DOCMounted ]; then
            mount $DOC_DEV $DOC
         fi
         DOCMounted ExitOnError
         #
         # backup previous list 
         #
         DOCBackup $LST_FILE
         #
         #  list files on device
         #
         DOCList
         ;;              # end -s
      #
      # Copy Files 
      #
      -f)
         if [ ! -f $CFG_FILE ]; then
            #
            # Build configuration default - use all files
            #
            ls "$PKG_DIR"/*.list > $CFG_FILE
            echo File \"$CFG_FILE\" not found, creating default $CFG_FILE
         fi
         #
         # load standard files and overwrite with files from update directory
         #
         DOCExtract
         DOCUpdate
         #
         ;;
      -u)              # lilo boot operation
                       #
         sync          # make sure our paranoia is unfounded
         #
         # Do Lilo operation if requested
         #
         DOCLilo
         if [ $1 = 1 ]; then
            #
            echo ""
            echo System should boot from DOC - Disable HDD in BIOS!!
            echo ""
         fi
         ;;
      *)
         echo Invalid Parameter: $1
         DOCUsage
   #
   #
   esac     # end commandline processing
#
# rm -r $DOC_LOG        # comment out to see results
#
# end.
#
