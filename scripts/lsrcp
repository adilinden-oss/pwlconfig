#! /bin/sh
#
###
#  Copies all the files from an 'ls -R' listing file
#
#  lscp -v -h [ list_File_Name [ source_root_dir ] ]
#
#     -v --version    - watch it all happen and Log results
#     -h --help       - this help screen
#     list_file_name  - a file created by capturing the output of ls -R
#     source_root_dir - directory where the 'ls -R' was executed from
#
###
#
# History
#   V0.1 - created - use 'grep "^ *#" lsrcp' to see program overview
#
LOG=
verMode=
Ver=0.1
progInfo="\n`basename $0` - Version $Ver\n"
#
# usage( [ error message ] )
#    prints the given error message or a help screen parsed from this file
#    (help screen is delimited by "###" at the start of a line)
#
function usage()
{
   if [ ! "$1" = "" ] ; then
      echo -e "\nError: $* \n"
   else
      echo -e $progInfo
      sed -n /^###/,/^###/p $0 | sed s/^#*//g
   fi
   exit 0
}
#
# verify( args )
#    check command line parameters or prompt user to get them
#
function verify()
{
   #
   # check for verbose option
   #
   if [ "$1" = "-v" ] || [ "$1" = "--verbose" ] ; then
      verMode="-v"
      LOG=`basename $0`.log
      rm -rf $log
      echo -e $progInfo
      shift
   fi
   #
   # check for help option
   #
   if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
      usage
   fi
   #
   # Verify list file (result file from ls -R)
   #
   if [ "$1" = "" ] ; then
     echo -n "Enter list file name: "
     read lsFn
     if [ "$lsFn" = "" ] ; then
        usage "You must specify an existing file as created by ls -R"
     fi
   else
     lsFn="$1"
   fi
   #
   if [ ! -f "$lsFn" ] ; then
     usage "File $lsFn not found - create with \"ls -R\" "
   elif [ ! -r "$lsFn" ] ; then
     usage "File $lsFn not readable - check permissions and mode."
   fi
   #
   # Get Source root directory (the directory ls -R was executed from)
   #
   if [ "$2" = "" ] ; then
      echo -n "Name of Source Root Directory:"
      read srcDir
      if [ "$srcDir" = "" ] ; then
         usage
      fi
   else
      srcDir="$2"
   fi
   #
   if [ ! -d "$srcDir" ] ; then
      usage "Source Directory \"$srcDir\" not found."
   fi
}

#
# main - parse the file, enter each directory and start copying
#
   # verify command line
   #
   verify $*

   destDir=$PWD
   curDir="."
   echo -en ${verMode:+"Files listed in: $lsFn \nwill be copied from: $srcDir to: $destDir\n"}
   #
   # for every non-blank file or directory listed
   #
   for lineIn in `sed /^$/d $lsFn`; do
      #
      # check for source directory - specified with ":" suffix
      #
      dirLine=${lineIn%":"}
      if [ "$dirLine" = "$lineIn" ] ; then
         dirLine=""
      fi

      if [ ! "$dirLine" = "" ] ; then
         #
         # found new directory, create in destination
         #
         if [ ! -d "$destDir/$dirLine" ] ; then
            mkdir -p "$destDir/$dirLine"
            echo -en ${verMode:+"\nCreated Directory: $destDir/$dirLine\n"}
         fi
         #
         # assign this directory as Current - all filenames after this
         #  (until the next "dir:") are under this "current" directory
         #
         curDir="/"$dirLine
      #
      # check for destination directory
      #
      elif [ -d "$srcDir/$curDir/$lineIn" ] ; then
         #
         # directory listed in the "current directory", it may be empty
         #   so we create it here
         #
         if [ ! -d "$destDir/$curDir/$lineIn" ] ; then
            #
            # make directories, even if empty
            #
            mkdir -p $destDir/$curDir/$lineIn
            echo -en ${verMode:+"\nCreated Directory: $destDir/$curDir/$dirLine\n"}
         fi
      #
      else
         #
         # must be a file, see if we can find it and copy it
         #
         if [ ! -f "$srcDir/$curDir/$lineIn" ] ; then
            echo "File not found: $curDir/$lineIn" | tee -a $LOG
         else
            cp -fax $verMode $srcDir/$curDir/$lineIn $destDir/$curDir/$lineIn |tee -a $LOG

         fi
      fi
      #
   done
   # end for
   echo -en ${verMode:+"\nFiles Copied Total: `du -sh`\n"}
   # cleanup
# end.
